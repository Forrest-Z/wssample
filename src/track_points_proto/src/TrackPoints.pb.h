// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TrackPoints.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TrackPoints_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TrackPoints_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TrackPoints_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TrackPoints_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TrackPoints_2eproto;
namespace TrackPoints {
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Track;
class TrackDefaultTypeInternal;
extern TrackDefaultTypeInternal _Track_default_instance_;
}  // namespace TrackPoints
PROTOBUF_NAMESPACE_OPEN
template<> ::TrackPoints::Point* Arena::CreateMaybeMessage<::TrackPoints::Point>(Arena*);
template<> ::TrackPoints::Track* Arena::CreateMaybeMessage<::TrackPoints::Track>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TrackPoints {

// ===================================================================

class Point :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TrackPoints.Point) */ {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(nullptr);
  }

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TrackPoints.Point";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TrackPoints_2eproto);
    return ::descriptor_table_TrackPoints_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kYawFieldNumber = 4,
    kKalmanVxFieldNumber = 5,
    kAccelFieldNumber = 6,
    kKalmanYawrateFieldNumber = 7,
    kSteerFieldNumber = 8,
    kThrottlePedalFieldNumber = 9,
    kXbrFieldNumber = 10,
    kGearFieldNumber = 11,
    kThisToLastDisFieldNumber = 12,
    kLeftLightFieldNumber = 13,
    kRightLightFieldNumber = 14,
    kAirBeepFieldNumber = 15,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float yaw = 4;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // float kalman_vx = 5;
  void clear_kalman_vx();
  float kalman_vx() const;
  void set_kalman_vx(float value);
  private:
  float _internal_kalman_vx() const;
  void _internal_set_kalman_vx(float value);
  public:

  // float accel = 6;
  void clear_accel();
  float accel() const;
  void set_accel(float value);
  private:
  float _internal_accel() const;
  void _internal_set_accel(float value);
  public:

  // float kalman_yawrate = 7;
  void clear_kalman_yawrate();
  float kalman_yawrate() const;
  void set_kalman_yawrate(float value);
  private:
  float _internal_kalman_yawrate() const;
  void _internal_set_kalman_yawrate(float value);
  public:

  // float steer = 8;
  void clear_steer();
  float steer() const;
  void set_steer(float value);
  private:
  float _internal_steer() const;
  void _internal_set_steer(float value);
  public:

  // int32 throttle_pedal = 9;
  void clear_throttle_pedal();
  ::PROTOBUF_NAMESPACE_ID::int32 throttle_pedal() const;
  void set_throttle_pedal(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_throttle_pedal() const;
  void _internal_set_throttle_pedal(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float xbr = 10;
  void clear_xbr();
  float xbr() const;
  void set_xbr(float value);
  private:
  float _internal_xbr() const;
  void _internal_set_xbr(float value);
  public:

  // int32 gear = 11;
  void clear_gear();
  ::PROTOBUF_NAMESPACE_ID::int32 gear() const;
  void set_gear(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gear() const;
  void _internal_set_gear(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float this_to_last_dis = 12;
  void clear_this_to_last_dis();
  float this_to_last_dis() const;
  void set_this_to_last_dis(float value);
  private:
  float _internal_this_to_last_dis() const;
  void _internal_set_this_to_last_dis(float value);
  public:

  // int32 left_light = 13;
  void clear_left_light();
  ::PROTOBUF_NAMESPACE_ID::int32 left_light() const;
  void set_left_light(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_left_light() const;
  void _internal_set_left_light(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 right_light = 14;
  void clear_right_light();
  ::PROTOBUF_NAMESPACE_ID::int32 right_light() const;
  void set_right_light(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_right_light() const;
  void _internal_set_right_light(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 air_beep = 15;
  void clear_air_beep();
  ::PROTOBUF_NAMESPACE_ID::int32 air_beep() const;
  void set_air_beep(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_air_beep() const;
  void _internal_set_air_beep(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TrackPoints.Point)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  float yaw_;
  float kalman_vx_;
  float accel_;
  float kalman_yawrate_;
  float steer_;
  ::PROTOBUF_NAMESPACE_ID::int32 throttle_pedal_;
  float xbr_;
  ::PROTOBUF_NAMESPACE_ID::int32 gear_;
  float this_to_last_dis_;
  ::PROTOBUF_NAMESPACE_ID::int32 left_light_;
  ::PROTOBUF_NAMESPACE_ID::int32 right_light_;
  ::PROTOBUF_NAMESPACE_ID::int32 air_beep_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TrackPoints_2eproto;
};
// -------------------------------------------------------------------

class Track :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TrackPoints.Track) */ {
 public:
  Track();
  virtual ~Track();

  Track(const Track& from);
  Track(Track&& from) noexcept
    : Track() {
    *this = ::std::move(from);
  }

  inline Track& operator=(const Track& from) {
    CopyFrom(from);
    return *this;
  }
  inline Track& operator=(Track&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Track& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Track* internal_default_instance() {
    return reinterpret_cast<const Track*>(
               &_Track_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Track& a, Track& b) {
    a.Swap(&b);
  }
  inline void Swap(Track* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Track* New() const final {
    return CreateMaybeMessage<Track>(nullptr);
  }

  Track* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Track>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Track& from);
  void MergeFrom(const Track& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Track* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TrackPoints.Track";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TrackPoints_2eproto);
    return ::descriptor_table_TrackPoints_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPtFieldNumber = 4,
    kCoordTypeFieldNumber = 1,
    kTrackPointsCountFieldNumber = 2,
    kTrackDisFieldNumber = 3,
  };
  // repeated .TrackPoints.Point pt = 4;
  int pt_size() const;
  private:
  int _internal_pt_size() const;
  public:
  void clear_pt();
  ::TrackPoints::Point* mutable_pt(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TrackPoints::Point >*
      mutable_pt();
  private:
  const ::TrackPoints::Point& _internal_pt(int index) const;
  ::TrackPoints::Point* _internal_add_pt();
  public:
  const ::TrackPoints::Point& pt(int index) const;
  ::TrackPoints::Point* add_pt();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TrackPoints::Point >&
      pt() const;

  // string coord_type = 1;
  void clear_coord_type();
  const std::string& coord_type() const;
  void set_coord_type(const std::string& value);
  void set_coord_type(std::string&& value);
  void set_coord_type(const char* value);
  void set_coord_type(const char* value, size_t size);
  std::string* mutable_coord_type();
  std::string* release_coord_type();
  void set_allocated_coord_type(std::string* coord_type);
  private:
  const std::string& _internal_coord_type() const;
  void _internal_set_coord_type(const std::string& value);
  std::string* _internal_mutable_coord_type();
  public:

  // int32 track_points_count = 2;
  void clear_track_points_count();
  ::PROTOBUF_NAMESPACE_ID::int32 track_points_count() const;
  void set_track_points_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_track_points_count() const;
  void _internal_set_track_points_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float track_dis = 3;
  void clear_track_dis();
  float track_dis() const;
  void set_track_dis(float value);
  private:
  float _internal_track_dis() const;
  void _internal_set_track_dis(float value);
  public:

  // @@protoc_insertion_point(class_scope:TrackPoints.Track)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TrackPoints::Point > pt_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr coord_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 track_points_count_;
  float track_dis_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TrackPoints_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point

// float x = 1;
inline void Point::clear_x() {
  x_ = 0;
}
inline float Point::_internal_x() const {
  return x_;
}
inline float Point::x() const {
  // @@protoc_insertion_point(field_get:TrackPoints.Point.x)
  return _internal_x();
}
inline void Point::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Point::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:TrackPoints.Point.x)
}

// float y = 2;
inline void Point::clear_y() {
  y_ = 0;
}
inline float Point::_internal_y() const {
  return y_;
}
inline float Point::y() const {
  // @@protoc_insertion_point(field_get:TrackPoints.Point.y)
  return _internal_y();
}
inline void Point::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Point::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:TrackPoints.Point.y)
}

// float z = 3;
inline void Point::clear_z() {
  z_ = 0;
}
inline float Point::_internal_z() const {
  return z_;
}
inline float Point::z() const {
  // @@protoc_insertion_point(field_get:TrackPoints.Point.z)
  return _internal_z();
}
inline void Point::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Point::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:TrackPoints.Point.z)
}

// float yaw = 4;
inline void Point::clear_yaw() {
  yaw_ = 0;
}
inline float Point::_internal_yaw() const {
  return yaw_;
}
inline float Point::yaw() const {
  // @@protoc_insertion_point(field_get:TrackPoints.Point.yaw)
  return _internal_yaw();
}
inline void Point::_internal_set_yaw(float value) {
  
  yaw_ = value;
}
inline void Point::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:TrackPoints.Point.yaw)
}

// float kalman_vx = 5;
inline void Point::clear_kalman_vx() {
  kalman_vx_ = 0;
}
inline float Point::_internal_kalman_vx() const {
  return kalman_vx_;
}
inline float Point::kalman_vx() const {
  // @@protoc_insertion_point(field_get:TrackPoints.Point.kalman_vx)
  return _internal_kalman_vx();
}
inline void Point::_internal_set_kalman_vx(float value) {
  
  kalman_vx_ = value;
}
inline void Point::set_kalman_vx(float value) {
  _internal_set_kalman_vx(value);
  // @@protoc_insertion_point(field_set:TrackPoints.Point.kalman_vx)
}

// float accel = 6;
inline void Point::clear_accel() {
  accel_ = 0;
}
inline float Point::_internal_accel() const {
  return accel_;
}
inline float Point::accel() const {
  // @@protoc_insertion_point(field_get:TrackPoints.Point.accel)
  return _internal_accel();
}
inline void Point::_internal_set_accel(float value) {
  
  accel_ = value;
}
inline void Point::set_accel(float value) {
  _internal_set_accel(value);
  // @@protoc_insertion_point(field_set:TrackPoints.Point.accel)
}

// float kalman_yawrate = 7;
inline void Point::clear_kalman_yawrate() {
  kalman_yawrate_ = 0;
}
inline float Point::_internal_kalman_yawrate() const {
  return kalman_yawrate_;
}
inline float Point::kalman_yawrate() const {
  // @@protoc_insertion_point(field_get:TrackPoints.Point.kalman_yawrate)
  return _internal_kalman_yawrate();
}
inline void Point::_internal_set_kalman_yawrate(float value) {
  
  kalman_yawrate_ = value;
}
inline void Point::set_kalman_yawrate(float value) {
  _internal_set_kalman_yawrate(value);
  // @@protoc_insertion_point(field_set:TrackPoints.Point.kalman_yawrate)
}

// float steer = 8;
inline void Point::clear_steer() {
  steer_ = 0;
}
inline float Point::_internal_steer() const {
  return steer_;
}
inline float Point::steer() const {
  // @@protoc_insertion_point(field_get:TrackPoints.Point.steer)
  return _internal_steer();
}
inline void Point::_internal_set_steer(float value) {
  
  steer_ = value;
}
inline void Point::set_steer(float value) {
  _internal_set_steer(value);
  // @@protoc_insertion_point(field_set:TrackPoints.Point.steer)
}

// int32 throttle_pedal = 9;
inline void Point::clear_throttle_pedal() {
  throttle_pedal_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Point::_internal_throttle_pedal() const {
  return throttle_pedal_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Point::throttle_pedal() const {
  // @@protoc_insertion_point(field_get:TrackPoints.Point.throttle_pedal)
  return _internal_throttle_pedal();
}
inline void Point::_internal_set_throttle_pedal(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  throttle_pedal_ = value;
}
inline void Point::set_throttle_pedal(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_throttle_pedal(value);
  // @@protoc_insertion_point(field_set:TrackPoints.Point.throttle_pedal)
}

// float xbr = 10;
inline void Point::clear_xbr() {
  xbr_ = 0;
}
inline float Point::_internal_xbr() const {
  return xbr_;
}
inline float Point::xbr() const {
  // @@protoc_insertion_point(field_get:TrackPoints.Point.xbr)
  return _internal_xbr();
}
inline void Point::_internal_set_xbr(float value) {
  
  xbr_ = value;
}
inline void Point::set_xbr(float value) {
  _internal_set_xbr(value);
  // @@protoc_insertion_point(field_set:TrackPoints.Point.xbr)
}

// int32 gear = 11;
inline void Point::clear_gear() {
  gear_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Point::_internal_gear() const {
  return gear_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Point::gear() const {
  // @@protoc_insertion_point(field_get:TrackPoints.Point.gear)
  return _internal_gear();
}
inline void Point::_internal_set_gear(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gear_ = value;
}
inline void Point::set_gear(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gear(value);
  // @@protoc_insertion_point(field_set:TrackPoints.Point.gear)
}

// float this_to_last_dis = 12;
inline void Point::clear_this_to_last_dis() {
  this_to_last_dis_ = 0;
}
inline float Point::_internal_this_to_last_dis() const {
  return this_to_last_dis_;
}
inline float Point::this_to_last_dis() const {
  // @@protoc_insertion_point(field_get:TrackPoints.Point.this_to_last_dis)
  return _internal_this_to_last_dis();
}
inline void Point::_internal_set_this_to_last_dis(float value) {
  
  this_to_last_dis_ = value;
}
inline void Point::set_this_to_last_dis(float value) {
  _internal_set_this_to_last_dis(value);
  // @@protoc_insertion_point(field_set:TrackPoints.Point.this_to_last_dis)
}

// int32 left_light = 13;
inline void Point::clear_left_light() {
  left_light_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Point::_internal_left_light() const {
  return left_light_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Point::left_light() const {
  // @@protoc_insertion_point(field_get:TrackPoints.Point.left_light)
  return _internal_left_light();
}
inline void Point::_internal_set_left_light(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  left_light_ = value;
}
inline void Point::set_left_light(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_left_light(value);
  // @@protoc_insertion_point(field_set:TrackPoints.Point.left_light)
}

// int32 right_light = 14;
inline void Point::clear_right_light() {
  right_light_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Point::_internal_right_light() const {
  return right_light_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Point::right_light() const {
  // @@protoc_insertion_point(field_get:TrackPoints.Point.right_light)
  return _internal_right_light();
}
inline void Point::_internal_set_right_light(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  right_light_ = value;
}
inline void Point::set_right_light(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_right_light(value);
  // @@protoc_insertion_point(field_set:TrackPoints.Point.right_light)
}

// int32 air_beep = 15;
inline void Point::clear_air_beep() {
  air_beep_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Point::_internal_air_beep() const {
  return air_beep_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Point::air_beep() const {
  // @@protoc_insertion_point(field_get:TrackPoints.Point.air_beep)
  return _internal_air_beep();
}
inline void Point::_internal_set_air_beep(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  air_beep_ = value;
}
inline void Point::set_air_beep(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_air_beep(value);
  // @@protoc_insertion_point(field_set:TrackPoints.Point.air_beep)
}

// -------------------------------------------------------------------

// Track

// string coord_type = 1;
inline void Track::clear_coord_type() {
  coord_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Track::coord_type() const {
  // @@protoc_insertion_point(field_get:TrackPoints.Track.coord_type)
  return _internal_coord_type();
}
inline void Track::set_coord_type(const std::string& value) {
  _internal_set_coord_type(value);
  // @@protoc_insertion_point(field_set:TrackPoints.Track.coord_type)
}
inline std::string* Track::mutable_coord_type() {
  // @@protoc_insertion_point(field_mutable:TrackPoints.Track.coord_type)
  return _internal_mutable_coord_type();
}
inline const std::string& Track::_internal_coord_type() const {
  return coord_type_.GetNoArena();
}
inline void Track::_internal_set_coord_type(const std::string& value) {
  
  coord_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Track::set_coord_type(std::string&& value) {
  
  coord_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TrackPoints.Track.coord_type)
}
inline void Track::set_coord_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  coord_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TrackPoints.Track.coord_type)
}
inline void Track::set_coord_type(const char* value, size_t size) {
  
  coord_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TrackPoints.Track.coord_type)
}
inline std::string* Track::_internal_mutable_coord_type() {
  
  return coord_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Track::release_coord_type() {
  // @@protoc_insertion_point(field_release:TrackPoints.Track.coord_type)
  
  return coord_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Track::set_allocated_coord_type(std::string* coord_type) {
  if (coord_type != nullptr) {
    
  } else {
    
  }
  coord_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), coord_type);
  // @@protoc_insertion_point(field_set_allocated:TrackPoints.Track.coord_type)
}

// int32 track_points_count = 2;
inline void Track::clear_track_points_count() {
  track_points_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Track::_internal_track_points_count() const {
  return track_points_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Track::track_points_count() const {
  // @@protoc_insertion_point(field_get:TrackPoints.Track.track_points_count)
  return _internal_track_points_count();
}
inline void Track::_internal_set_track_points_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  track_points_count_ = value;
}
inline void Track::set_track_points_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_track_points_count(value);
  // @@protoc_insertion_point(field_set:TrackPoints.Track.track_points_count)
}

// float track_dis = 3;
inline void Track::clear_track_dis() {
  track_dis_ = 0;
}
inline float Track::_internal_track_dis() const {
  return track_dis_;
}
inline float Track::track_dis() const {
  // @@protoc_insertion_point(field_get:TrackPoints.Track.track_dis)
  return _internal_track_dis();
}
inline void Track::_internal_set_track_dis(float value) {
  
  track_dis_ = value;
}
inline void Track::set_track_dis(float value) {
  _internal_set_track_dis(value);
  // @@protoc_insertion_point(field_set:TrackPoints.Track.track_dis)
}

// repeated .TrackPoints.Point pt = 4;
inline int Track::_internal_pt_size() const {
  return pt_.size();
}
inline int Track::pt_size() const {
  return _internal_pt_size();
}
inline void Track::clear_pt() {
  pt_.Clear();
}
inline ::TrackPoints::Point* Track::mutable_pt(int index) {
  // @@protoc_insertion_point(field_mutable:TrackPoints.Track.pt)
  return pt_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TrackPoints::Point >*
Track::mutable_pt() {
  // @@protoc_insertion_point(field_mutable_list:TrackPoints.Track.pt)
  return &pt_;
}
inline const ::TrackPoints::Point& Track::_internal_pt(int index) const {
  return pt_.Get(index);
}
inline const ::TrackPoints::Point& Track::pt(int index) const {
  // @@protoc_insertion_point(field_get:TrackPoints.Track.pt)
  return _internal_pt(index);
}
inline ::TrackPoints::Point* Track::_internal_add_pt() {
  return pt_.Add();
}
inline ::TrackPoints::Point* Track::add_pt() {
  // @@protoc_insertion_point(field_add:TrackPoints.Track.pt)
  return _internal_add_pt();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TrackPoints::Point >&
Track::pt() const {
  // @@protoc_insertion_point(field_list:TrackPoints.Track.pt)
  return pt_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TrackPoints

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TrackPoints_2eproto
