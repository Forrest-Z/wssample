/*********************************************/
/*            Beijing Nuogeng                      */
/*                ROS Driver                           */
/*    Packet to Published Message           */
/*                                                           */
/*    Copyright 2017, Beijing Nuogeng    */
/*                                                          */
/*********************************************/


/*********************************************/
/*              Introduction                           */
/*********************************************/
This is an example to create a ROS driver that reads and decodes the GSOF packets (in this case packet #40) and publishes the information as ROS topics / messages. 

It should work only on NAV992 GNSS/INS devices.

This example has been developed and tested using Ubuntu Linux v16.04 LTS and ROS Lunar. Installation instructions for ROS can be found here: http://wiki.ros.org/lunar/Installation/Ubuntu.

If you require any assistance using this code, please email support@nuogeng.com.cn


/*********************************************/
/*            Build Instructions                     */
/*********************************************/
ROS driver build instructions from: http://www.clearpathrobotics.com/assets/guides/ros/Creating%20publisher.html#creating-a-workspace-package

1. Open a new Terminal window and type: "mkdir ~/ros[enter]".
2. Type: "mkdir ~/ros/src[enter]".
3. Type: "cd ~/ros/src[enter]".
4. Type: "catkin_init_workspace[enter]".
5. Type: "catkin_create_pkg nav992_driver roscpp std_msgs[enter]".
6. Copy the supplied "src" directory and the "package.xml" file into the "~/ros/src/nav992_driver" directory. It should be OK to overwrite the existing "package.xml" file if you are following these instructions explicitly. If installing into your own pre-existing catkin workspace it may be necessary to manually merge the contents of these files.
7. Modify the "package.xml" file in ~/ros/src/nav992_driver directory as required.
8. Copy the supplied "CMakeLists.txt"file into the "~/ros/src/nav992_driver" directory, or modify the exisitng CMakeLists.txt file in the "~/ros/src/nav992_driver" directory by adding two lines at the end (you may need to modify the paths to suit your installation):
   add_executable(nav992_driver src/nav992_driver.cpp src/gsof_records.c src/gsof_packet_protocol.c src/struct_endian.c src/struct_pack_unpack.c src/rs232/rs232.c)
   target_link_libraries(nav992_driver ${catkin_LIBRARIES})
9. Type: "cd ~/ros[enter]".
10. Type: "catkin_make[enter]".


/*********************************************/
/*           Device Configuration            */
/*********************************************/
To use this example code, your nav992 device should be already configured to output gsof records #0x10/0x31/0x32.


/*********************************************/
/*             Run Instructions              */
/*********************************************/
1. Open a new Terminal window and type: "sudo adduser user_name dialout[enter]". This should only need to be done once.
2. Plug in the USB to RS232 adapter cable that is connected to the nav992 device.
3. In the Terminal window type: "dmesg | grep tty [enter]" to confirm the name of the com port (should be something like "ttyUSB0").
4. Type: "roscore[enter]" to start ROS Master.
5. Open a new Terminal window and type: "source ~/ros/devel/setup.bash[enter]".
6. If your com port is named "ttyUSB0" and your baud rate is set to 115200 bps, type: "rosrun nav992_driver nav992_driver [enter]". If your com port or baud rate are different then type: "rosrun nav992_driver nav992_driver /dev/your_com_port_name your_baud_rate [enter]". 
7. Open a new Terminal window and type: "rosnode list[enter]" to list the available nodes. You should see these listed:
   /an_device_node
   /rosout
8. Type: "rostopic list[enter]" to list the published topics. You should see these listed:
   /an_device/FilterStatus
   /an_device/Imu
   /an_device/NavSatFix
   /an_device/SystemStatus
   /an_device/Twist
9. Type: "rostopic echo /an_device/Imu[enter]"to see the "Imu" messages being published.
10. Open a new Terminal window and type: "rostopic echo /an_device/NavSatFix[enter]"to see the "NavSatFix" messages being published.
11. Open a new Terminal window and type: "rostopic echo /an_device/Twist[enter]"to see the "Twist" messages being published.
12. Open a new Terminal window and type: "rostopic echo /an_device/FilterStatus[enter]"to see the "Filter Status" messages being published.
13. Open a new Terminal window and type: "rostopic echo /an_device/SystemStatus[enter]"to see the "System Status" messages being published.
14. You need to subscribe to these topics in your code to get access to the data in the messages.


/*********************************************/
/*             Published Topics              */
/*********************************************/
an_device/NavSatFix
an_device/Twist
an_device/Imu
an_device/SystemStatus
an_device/FilterStatus


/*********************************************/
/* Published Messages: an_device/NavSatFix   */
/*********************************************/
sensor_msgs / NavSatFix / Header / Stamp / Sec		
sensor_msgs / NavSatFix / Header / Stamp / Nsec 	
sensor_msgs / NavSatFix / Header / Frame_ID	 		// Fixed to 0
sensor_msgs / NavSatFix / Status / Status			
sensor_msgs / NavSatFix / Status / Service			// Fixed to 1 (GPS)
sensor_msgs / NavSatFix / Latitude					
sensor_msgs / NavSatFix / Longitude					
sensor_msgs / NavSatFix / Altitude					
sensor_msgs / NavSatFix / Position_Covariance		
sensor_msgs / NavSatFix / Position_Covariance_Type	// Fixed to 2 (diagonal known)


/*********************************************/
/*   Published Messages: an_device/Twist     */
/*********************************************/
geometry_msgs / Twist / Linear / X					
geometry_msgs / Twist / Linear / Y					
geometry_msgs / Twist / Linear / Z					
geometry_msgs / Twist / Angular / X					
geometry_msgs / Twist / Angular / Y					
geometry_msgs / Twist / Angular / Z					


/*********************************************/
/*    Published Messages: an_device/Imu      */
/*********************************************/
sensor_msgs / Imu / Orientation / X					
sensor_msgs / Imu / Orientation / Y					
sensor_msgs / Imu / Orientation / Z					
sensor_msgs / Imu / Orientation / W					
sensor_msgs / Imu / Orientation_Covariance			
sensor_msgs / Imu / Angular_Velocity / X			
sensor_msgs / Imu / Angular_Velocity / Y
sensor_msgs / Imu / Angular_Velocity / Z
sensor_msgs / Imu / Linear_Acceleration / X
sensor_msgs / Imu / Linear_Acceleration / Y
sensor_msgs / Imu / Linear_Acceleration / Z


/**********************************************/
/* Published Messages: an_device/SystemStatus */
/**********************************************/
diagnostic_msgs / Diagnostic_Status / Name			// Fixed to "System Status"
diagnostic_msgs / Diagnostic_Status / Level			
diagnostic_msgs / Diagnostic_Status / Message		


/**********************************************/
/* Published Messages: an_device/FilterStatus */
/**********************************************/
diagnostic_msgs / Diagnostic_Status / Name			// Fixed to "Filter Status"
diagnostic_msgs / Diagnostic_Status / Level			
diagnostic_msgs / Diagnostic_Status / Message


/**********************************************/
/*          Messages Not Published            */
/**********************************************/
sensor_msgs / Imu / Angular_Velocity_Covariance 
sensor_msgs / Imu / Linear_Acceleration_Covariance
