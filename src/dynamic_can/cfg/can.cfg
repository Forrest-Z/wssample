#!/usr/bin/env python
PACKAGE = "dynamic_can"
from dynamic_reconfigure.parameter_generator_catkin import *
 
gen = ParameterGenerator()
 
gen.add("ignition",           str_t,      0, "An Integer parameter",  "11")
gen.add("steer",              double_t,   0, "A double parameter",    0, -800,   800)
gen.add("steer_active",       double_t,   0, "A string parameter",    0, 0, 1)
gen.add("steer_angle_rate",   double_t,   0, "A Boolean parameter",   70, 0,   540)
 
gen.add("throttle_active",    int_t,      0, "An Integer parameter",  0,  0, 1)
gen.add("throttle_precentage",int_t,      0, "A double parameter",    0, 0,  100)
gen.add("XBR",                double_t,   0, "A string parameter",    0, -5.5,  0)
gen.add("XBR_active",         int_t,      0, "A Boolean parameter",   0, 0,  1)




gen.add( "hands",             str_t,   0, "A string parameter",       "MF_READY")
gen.add("EPB_active",         int_t,   0, "An Integer parameter",     0,  0, 1)
gen.add("EPB",                int_t,   0, "A double parameter",       0, 0,  1)
gen.add("retarder_active",    int_t,   0, "A string parameter",       0, 0,  1)
gen.add("retarder",           double_t,0, "A Boolean parameter",      0, -125,  0)
gen.add("gear_active",        int_t,   0, "An Integer parameter",     0,  0, 1)
gen.add("max_forward_gear",   int_t,   0, "A double parameter",       6, 1,  6)
gen.add("gear_R82_N78_D68",   int_t,   0, "A string parameter",       78, 0,  100)
gen.add("hang_active",        int_t,   0, "A Boolean parameter",      0, 0,  1)
gen.add("hang",               str_t,   0, "A Boolean parameter",      "11")
gen.add("fsm_state",          int_t,   0, "A Boolean parameter",      0, 0,  200)

gen.add("left",               bool_t,   0, "A Boolean parameter",     False)
gen.add("right",              bool_t,   0, "A Boolean parameter",     False)
gen.add("near",               bool_t,   0, "A Boolean parameter",     False)
gen.add("far",                bool_t,   0, "A Boolean parameter",     False)
gen.add("top_warn",           bool_t,   0, "A Boolean parameter",     False)
gen.add("air_beep",           bool_t,   0, "A Boolean parameter",     False)
gen.add("front_fog",          bool_t,   0, "A Boolean parameter",     False)
gen.add("front_work",         bool_t,   0, "A Boolean parameter",     False)
gen.add("side",               bool_t,   0, "A Boolean parameter",     False)
gen.add("position",           bool_t,   0, "A Boolean parameter",     False)
gen.add("emergency",          bool_t,   0, "A Boolean parameter",     False)
gen.add("brake",              bool_t,   0, "A Boolean parameter",     False)
gen.add("reverse",            bool_t,   0, "A Boolean parameter",     False)
gen.add("back_work",          bool_t,   0, "A Boolean parameter",     False)
gen.add("cooler",             bool_t,   0, "A Boolean parameter",     False)
gen.add("axle_diff",          bool_t,   0, "A Boolean parameter",     False)
gen.add("exhaust_brake",      bool_t,   0, "A Boolean parameter",     False)




size_enum = gen.enum([ gen.const("Small",      int_t, 0, "A small constant"),
                      gen.const("Medium",     int_t, 1, "A medium constant"),
                      gen.const("Large",      int_t, 2, "A large constant"),
                      gen.const("ExtraLarge", int_t, 3, "An extra large constant")], "An enum to set size")
 

gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)

 

exit(gen.generate(PACKAGE, "dynamic_can", "can"))
