// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: G29Socket.proto

#include "G29Socket.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace G29Socket {
class G29SocketPackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<G29SocketPack> _instance;
} _G29SocketPack_default_instance_;
}  // namespace G29Socket
static void InitDefaultsscc_info_G29SocketPack_G29Socket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::G29Socket::_G29SocketPack_default_instance_;
    new (ptr) ::G29Socket::G29SocketPack();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::G29Socket::G29SocketPack::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_G29SocketPack_G29Socket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_G29SocketPack_G29Socket_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_G29Socket_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_G29Socket_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_G29Socket_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_G29Socket_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::G29Socket::G29SocketPack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::G29Socket::G29SocketPack, seq_),
  PROTOBUF_FIELD_OFFSET(::G29Socket::G29SocketPack, secs_),
  PROTOBUF_FIELD_OFFSET(::G29Socket::G29SocketPack, nsecs_),
  PROTOBUF_FIELD_OFFSET(::G29Socket::G29SocketPack, frame_id_),
  PROTOBUF_FIELD_OFFSET(::G29Socket::G29SocketPack, axes_),
  PROTOBUF_FIELD_OFFSET(::G29Socket::G29SocketPack, buttons_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::G29Socket::G29SocketPack)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::G29Socket::_G29SocketPack_default_instance_),
};

const char descriptor_table_protodef_G29Socket_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017G29Socket.proto\022\tG29Socket\"j\n\rG29Socke"
  "tPack\022\013\n\003seq\030\001 \001(\r\022\014\n\004secs\030\002 \001(\r\022\r\n\005nsec"
  "s\030\003 \001(\r\022\020\n\010frame_id\030\004 \001(\t\022\014\n\004axes\030\005 \003(\002\022"
  "\017\n\007buttons\030\006 \003(\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_G29Socket_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_G29Socket_2eproto_sccs[1] = {
  &scc_info_G29SocketPack_G29Socket_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_G29Socket_2eproto_once;
static bool descriptor_table_G29Socket_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_G29Socket_2eproto = {
  &descriptor_table_G29Socket_2eproto_initialized, descriptor_table_protodef_G29Socket_2eproto, "G29Socket.proto", 144,
  &descriptor_table_G29Socket_2eproto_once, descriptor_table_G29Socket_2eproto_sccs, descriptor_table_G29Socket_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_G29Socket_2eproto::offsets,
  file_level_metadata_G29Socket_2eproto, 1, file_level_enum_descriptors_G29Socket_2eproto, file_level_service_descriptors_G29Socket_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_G29Socket_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_G29Socket_2eproto), true);
namespace G29Socket {

// ===================================================================

void G29SocketPack::InitAsDefaultInstance() {
}
class G29SocketPack::_Internal {
 public:
};

G29SocketPack::G29SocketPack()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:G29Socket.G29SocketPack)
}
G29SocketPack::G29SocketPack(const G29SocketPack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      axes_(from.axes_),
      buttons_(from.buttons_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_frame_id().empty()) {
    frame_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.frame_id_);
  }
  ::memcpy(&seq_, &from.seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&nsecs_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(nsecs_));
  // @@protoc_insertion_point(copy_constructor:G29Socket.G29SocketPack)
}

void G29SocketPack::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_G29SocketPack_G29Socket_2eproto.base);
  frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nsecs_) -
      reinterpret_cast<char*>(&seq_)) + sizeof(nsecs_));
}

G29SocketPack::~G29SocketPack() {
  // @@protoc_insertion_point(destructor:G29Socket.G29SocketPack)
  SharedDtor();
}

void G29SocketPack::SharedDtor() {
  frame_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void G29SocketPack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const G29SocketPack& G29SocketPack::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_G29SocketPack_G29Socket_2eproto.base);
  return *internal_default_instance();
}


void G29SocketPack::Clear() {
// @@protoc_insertion_point(message_clear_start:G29Socket.G29SocketPack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  axes_.Clear();
  buttons_.Clear();
  frame_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nsecs_) -
      reinterpret_cast<char*>(&seq_)) + sizeof(nsecs_));
  _internal_metadata_.Clear();
}

const char* G29SocketPack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 secs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          secs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nsecs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          nsecs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string frame_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_frame_id(), ptr, ctx, "G29Socket.G29SocketPack.frame_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float axes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_axes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45) {
          _internal_add_axes(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float buttons = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_buttons(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53) {
          _internal_add_buttons(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* G29SocketPack::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:G29Socket.G29SocketPack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 seq = 1;
  if (this->seq() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_seq(), target);
  }

  // uint32 secs = 2;
  if (this->secs() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_secs(), target);
  }

  // uint32 nsecs = 3;
  if (this->nsecs() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_nsecs(), target);
  }

  // string frame_id = 4;
  if (this->frame_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frame_id().data(), static_cast<int>(this->_internal_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "G29Socket.G29SocketPack.frame_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_frame_id(), target);
  }

  // repeated float axes = 5;
  if (this->_internal_axes_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_axes(), target);
  }

  // repeated float buttons = 6;
  if (this->_internal_buttons_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_buttons(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:G29Socket.G29SocketPack)
  return target;
}

size_t G29SocketPack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:G29Socket.G29SocketPack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float axes = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_axes_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _axes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float buttons = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_buttons_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _buttons_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string frame_id = 4;
  if (this->frame_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame_id());
  }

  // uint32 seq = 1;
  if (this->seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_seq());
  }

  // uint32 secs = 2;
  if (this->secs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_secs());
  }

  // uint32 nsecs = 3;
  if (this->nsecs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nsecs());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void G29SocketPack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:G29Socket.G29SocketPack)
  GOOGLE_DCHECK_NE(&from, this);
  const G29SocketPack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<G29SocketPack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:G29Socket.G29SocketPack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:G29Socket.G29SocketPack)
    MergeFrom(*source);
  }
}

void G29SocketPack::MergeFrom(const G29SocketPack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:G29Socket.G29SocketPack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  axes_.MergeFrom(from.axes_);
  buttons_.MergeFrom(from.buttons_);
  if (from.frame_id().size() > 0) {

    frame_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.frame_id_);
  }
  if (from.seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from.secs() != 0) {
    _internal_set_secs(from._internal_secs());
  }
  if (from.nsecs() != 0) {
    _internal_set_nsecs(from._internal_nsecs());
  }
}

void G29SocketPack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:G29Socket.G29SocketPack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void G29SocketPack::CopyFrom(const G29SocketPack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:G29Socket.G29SocketPack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool G29SocketPack::IsInitialized() const {
  return true;
}

void G29SocketPack::InternalSwap(G29SocketPack* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  axes_.InternalSwap(&other->axes_);
  buttons_.InternalSwap(&other->buttons_);
  frame_id_.Swap(&other->frame_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(seq_, other->seq_);
  swap(secs_, other->secs_);
  swap(nsecs_, other->nsecs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata G29SocketPack::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace G29Socket
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::G29Socket::G29SocketPack* Arena::CreateMaybeMessage< ::G29Socket::G29SocketPack >(Arena* arena) {
  return Arena::CreateInternal< ::G29Socket::G29SocketPack >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
