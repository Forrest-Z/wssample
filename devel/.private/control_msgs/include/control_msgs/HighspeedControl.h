// Generated by gencpp from file control_msgs/HighspeedControl.msg
// DO NOT EDIT!


#ifndef CONTROL_MSGS_MESSAGE_HIGHSPEEDCONTROL_H
#define CONTROL_MSGS_MESSAGE_HIGHSPEEDCONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace control_msgs
{
template <class ContainerAllocator>
struct HighspeedControl_
{
  typedef HighspeedControl_<ContainerAllocator> Type;

  HighspeedControl_()
    : header()
    , control_type()
    , control_fsm()
    , lat_error(0.0)
    , ignition(0)
    , throttle_active(0)
    , throttle_precentage(0)
    , XBR_active(0)
    , XBR(0.0)
    , steer_active(0)
    , steer(0.0)
    , steer_angle_rate(0.0)  {
    }
  HighspeedControl_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , control_type(_alloc)
    , control_fsm(_alloc)
    , lat_error(0.0)
    , ignition(0)
    , throttle_active(0)
    , throttle_precentage(0)
    , XBR_active(0)
    , XBR(0.0)
    , steer_active(0)
    , steer(0.0)
    , steer_angle_rate(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _control_type_type;
  _control_type_type control_type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _control_fsm_type;
  _control_fsm_type control_fsm;

   typedef double _lat_error_type;
  _lat_error_type lat_error;

   typedef uint8_t _ignition_type;
  _ignition_type ignition;

   typedef uint8_t _throttle_active_type;
  _throttle_active_type throttle_active;

   typedef uint8_t _throttle_precentage_type;
  _throttle_precentage_type throttle_precentage;

   typedef uint8_t _XBR_active_type;
  _XBR_active_type XBR_active;

   typedef double _XBR_type;
  _XBR_type XBR;

   typedef uint8_t _steer_active_type;
  _steer_active_type steer_active;

   typedef double _steer_type;
  _steer_type steer;

   typedef double _steer_angle_rate_type;
  _steer_angle_rate_type steer_angle_rate;





  typedef boost::shared_ptr< ::control_msgs::HighspeedControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::control_msgs::HighspeedControl_<ContainerAllocator> const> ConstPtr;

}; // struct HighspeedControl_

typedef ::control_msgs::HighspeedControl_<std::allocator<void> > HighspeedControl;

typedef boost::shared_ptr< ::control_msgs::HighspeedControl > HighspeedControlPtr;
typedef boost::shared_ptr< ::control_msgs::HighspeedControl const> HighspeedControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::control_msgs::HighspeedControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::control_msgs::HighspeedControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace control_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'control_msgs': ['/home/oligay_61/zone3/src/message/control_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::control_msgs::HighspeedControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_msgs::HighspeedControl_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control_msgs::HighspeedControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control_msgs::HighspeedControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_msgs::HighspeedControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_msgs::HighspeedControl_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::control_msgs::HighspeedControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "091494fefb0d9d1769b9b0a619a55e53";
  }

  static const char* value(const ::control_msgs::HighspeedControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x091494fefb0d9d17ULL;
  static const uint64_t static_value2 = 0x69b9b0a619a55e53ULL;
};

template<class ContainerAllocator>
struct DataType< ::control_msgs::HighspeedControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "control_msgs/HighspeedControl";
  }

  static const char* value(const ::control_msgs::HighspeedControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::control_msgs::HighspeedControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
string control_type\n\
string control_fsm\n\
float64 lat_error\n\
\n\
uint8 ignition \n\
uint8 throttle_active\n\
uint8 throttle_precentage\n\
uint8 XBR_active\n\
float64 XBR\n\
# for Tli65\n\
uint8 steer_active\n\
float64 steer\n\
float64 steer_angle_rate\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::control_msgs::HighspeedControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::control_msgs::HighspeedControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.control_type);
      stream.next(m.control_fsm);
      stream.next(m.lat_error);
      stream.next(m.ignition);
      stream.next(m.throttle_active);
      stream.next(m.throttle_precentage);
      stream.next(m.XBR_active);
      stream.next(m.XBR);
      stream.next(m.steer_active);
      stream.next(m.steer);
      stream.next(m.steer_angle_rate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HighspeedControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::control_msgs::HighspeedControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::control_msgs::HighspeedControl_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "control_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.control_type);
    s << indent << "control_fsm: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.control_fsm);
    s << indent << "lat_error: ";
    Printer<double>::stream(s, indent + "  ", v.lat_error);
    s << indent << "ignition: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ignition);
    s << indent << "throttle_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.throttle_active);
    s << indent << "throttle_precentage: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.throttle_precentage);
    s << indent << "XBR_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.XBR_active);
    s << indent << "XBR: ";
    Printer<double>::stream(s, indent + "  ", v.XBR);
    s << indent << "steer_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.steer_active);
    s << indent << "steer: ";
    Printer<double>::stream(s, indent + "  ", v.steer);
    s << indent << "steer_angle_rate: ";
    Printer<double>::stream(s, indent + "  ", v.steer_angle_rate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROL_MSGS_MESSAGE_HIGHSPEEDCONTROL_H
