// Generated by gencpp from file control_msgs/LowspeedControl.msg
// DO NOT EDIT!


#ifndef CONTROL_MSGS_MESSAGE_LOWSPEEDCONTROL_H
#define CONTROL_MSGS_MESSAGE_LOWSPEEDCONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace control_msgs
{
template <class ContainerAllocator>
struct LowspeedControl_
{
  typedef LowspeedControl_<ContainerAllocator> Type;

  LowspeedControl_()
    : header()
    , hands()
    , EPB_active(0)
    , EPB(0)
    , retarder_active(0)
    , retarder(0.0)
    , gear_active(0)
    , max_forward_gear(0)
    , gear(0)
    , hang_active(0)
    , hang(0)
    , left(0)
    , right(0)
    , near(0)
    , far(0)
    , top_warn(0)
    , air_beep(0)
    , front_fog(0)
    , front_work(0)
    , side(0)
    , position(0)
    , emergency(0)
    , brake(0)
    , reverse(0)
    , back_work(0)
    , cooler(0)
    , axle_diff(0)
    , exhaust_brake(0)  {
    }
  LowspeedControl_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , hands(_alloc)
    , EPB_active(0)
    , EPB(0)
    , retarder_active(0)
    , retarder(0.0)
    , gear_active(0)
    , max_forward_gear(0)
    , gear(0)
    , hang_active(0)
    , hang(0)
    , left(0)
    , right(0)
    , near(0)
    , far(0)
    , top_warn(0)
    , air_beep(0)
    , front_fog(0)
    , front_work(0)
    , side(0)
    , position(0)
    , emergency(0)
    , brake(0)
    , reverse(0)
    , back_work(0)
    , cooler(0)
    , axle_diff(0)
    , exhaust_brake(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _hands_type;
  _hands_type hands;

   typedef uint8_t _EPB_active_type;
  _EPB_active_type EPB_active;

   typedef uint8_t _EPB_type;
  _EPB_type EPB;

   typedef uint8_t _retarder_active_type;
  _retarder_active_type retarder_active;

   typedef double _retarder_type;
  _retarder_type retarder;

   typedef uint8_t _gear_active_type;
  _gear_active_type gear_active;

   typedef uint8_t _max_forward_gear_type;
  _max_forward_gear_type max_forward_gear;

   typedef uint8_t _gear_type;
  _gear_type gear;

   typedef uint8_t _hang_active_type;
  _hang_active_type hang_active;

   typedef uint8_t _hang_type;
  _hang_type hang;

   typedef uint8_t _left_type;
  _left_type left;

   typedef uint8_t _right_type;
  _right_type right;

   typedef uint8_t _near_type;
  _near_type near;

   typedef uint8_t _far_type;
  _far_type far;

   typedef uint8_t _top_warn_type;
  _top_warn_type top_warn;

   typedef uint8_t _air_beep_type;
  _air_beep_type air_beep;

   typedef uint8_t _front_fog_type;
  _front_fog_type front_fog;

   typedef uint8_t _front_work_type;
  _front_work_type front_work;

   typedef uint8_t _side_type;
  _side_type side;

   typedef uint8_t _position_type;
  _position_type position;

   typedef uint8_t _emergency_type;
  _emergency_type emergency;

   typedef uint8_t _brake_type;
  _brake_type brake;

   typedef uint8_t _reverse_type;
  _reverse_type reverse;

   typedef uint8_t _back_work_type;
  _back_work_type back_work;

   typedef uint8_t _cooler_type;
  _cooler_type cooler;

   typedef uint8_t _axle_diff_type;
  _axle_diff_type axle_diff;

   typedef uint8_t _exhaust_brake_type;
  _exhaust_brake_type exhaust_brake;





  typedef boost::shared_ptr< ::control_msgs::LowspeedControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::control_msgs::LowspeedControl_<ContainerAllocator> const> ConstPtr;

}; // struct LowspeedControl_

typedef ::control_msgs::LowspeedControl_<std::allocator<void> > LowspeedControl;

typedef boost::shared_ptr< ::control_msgs::LowspeedControl > LowspeedControlPtr;
typedef boost::shared_ptr< ::control_msgs::LowspeedControl const> LowspeedControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::control_msgs::LowspeedControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::control_msgs::LowspeedControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace control_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'control_msgs': ['/home/oligay_61/zone3/src/message/control_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::control_msgs::LowspeedControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_msgs::LowspeedControl_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control_msgs::LowspeedControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control_msgs::LowspeedControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_msgs::LowspeedControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_msgs::LowspeedControl_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::control_msgs::LowspeedControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "575bedbd92f3b388148e6ef92921e040";
  }

  static const char* value(const ::control_msgs::LowspeedControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x575bedbd92f3b388ULL;
  static const uint64_t static_value2 = 0x148e6ef92921e040ULL;
};

template<class ContainerAllocator>
struct DataType< ::control_msgs::LowspeedControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "control_msgs/LowspeedControl";
  }

  static const char* value(const ::control_msgs::LowspeedControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::control_msgs::LowspeedControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
string hands\n\
\n\
uint8 EPB_active \n\
uint8 EPB\n\
uint8 retarder_active\n\
float64 retarder\n\
uint8 gear_active\n\
uint8 max_forward_gear\n\
uint8 gear\n\
uint8 hang_active\n\
uint8 hang\n\
\n\
# body switch\n\
uint8 left\n\
uint8 right\n\
uint8 near\n\
uint8 far\n\
uint8 top_warn\n\
uint8 air_beep\n\
uint8 front_fog\n\
uint8 front_work\n\
uint8 side\n\
uint8 position\n\
uint8 emergency\n\
uint8 brake\n\
uint8 reverse\n\
uint8 back_work\n\
uint8 cooler\n\
uint8 axle_diff\n\
uint8 exhaust_brake\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::control_msgs::LowspeedControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::control_msgs::LowspeedControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.hands);
      stream.next(m.EPB_active);
      stream.next(m.EPB);
      stream.next(m.retarder_active);
      stream.next(m.retarder);
      stream.next(m.gear_active);
      stream.next(m.max_forward_gear);
      stream.next(m.gear);
      stream.next(m.hang_active);
      stream.next(m.hang);
      stream.next(m.left);
      stream.next(m.right);
      stream.next(m.near);
      stream.next(m.far);
      stream.next(m.top_warn);
      stream.next(m.air_beep);
      stream.next(m.front_fog);
      stream.next(m.front_work);
      stream.next(m.side);
      stream.next(m.position);
      stream.next(m.emergency);
      stream.next(m.brake);
      stream.next(m.reverse);
      stream.next(m.back_work);
      stream.next(m.cooler);
      stream.next(m.axle_diff);
      stream.next(m.exhaust_brake);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LowspeedControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::control_msgs::LowspeedControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::control_msgs::LowspeedControl_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "hands: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.hands);
    s << indent << "EPB_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EPB_active);
    s << indent << "EPB: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EPB);
    s << indent << "retarder_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.retarder_active);
    s << indent << "retarder: ";
    Printer<double>::stream(s, indent + "  ", v.retarder);
    s << indent << "gear_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gear_active);
    s << indent << "max_forward_gear: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.max_forward_gear);
    s << indent << "gear: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gear);
    s << indent << "hang_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hang_active);
    s << indent << "hang: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hang);
    s << indent << "left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left);
    s << indent << "right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right);
    s << indent << "near: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.near);
    s << indent << "far: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.far);
    s << indent << "top_warn: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.top_warn);
    s << indent << "air_beep: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.air_beep);
    s << indent << "front_fog: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.front_fog);
    s << indent << "front_work: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.front_work);
    s << indent << "side: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.side);
    s << indent << "position: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.position);
    s << indent << "emergency: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.emergency);
    s << indent << "brake: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brake);
    s << indent << "reverse: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reverse);
    s << indent << "back_work: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.back_work);
    s << indent << "cooler: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cooler);
    s << indent << "axle_diff: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.axle_diff);
    s << indent << "exhaust_brake: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.exhaust_brake);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROL_MSGS_MESSAGE_LOWSPEEDCONTROL_H
