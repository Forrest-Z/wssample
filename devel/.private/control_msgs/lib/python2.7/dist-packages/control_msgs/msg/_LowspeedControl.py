# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from control_msgs/LowspeedControl.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class LowspeedControl(genpy.Message):
  _md5sum = "575bedbd92f3b388148e6ef92921e040"
  _type = "control_msgs/LowspeedControl"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

string hands

uint8 EPB_active 
uint8 EPB
uint8 retarder_active
float64 retarder
uint8 gear_active
uint8 max_forward_gear
uint8 gear
uint8 hang_active
uint8 hang

# body switch
uint8 left
uint8 right
uint8 near
uint8 far
uint8 top_warn
uint8 air_beep
uint8 front_fog
uint8 front_work
uint8 side
uint8 position
uint8 emergency
uint8 brake
uint8 reverse
uint8 back_work
uint8 cooler
uint8 axle_diff
uint8 exhaust_brake
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','hands','EPB_active','EPB','retarder_active','retarder','gear_active','max_forward_gear','gear','hang_active','hang','left','right','near','far','top_warn','air_beep','front_fog','front_work','side','position','emergency','brake','reverse','back_work','cooler','axle_diff','exhaust_brake']
  _slot_types = ['std_msgs/Header','string','uint8','uint8','uint8','float64','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,hands,EPB_active,EPB,retarder_active,retarder,gear_active,max_forward_gear,gear,hang_active,hang,left,right,near,far,top_warn,air_beep,front_fog,front_work,side,position,emergency,brake,reverse,back_work,cooler,axle_diff,exhaust_brake

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LowspeedControl, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.hands is None:
        self.hands = ''
      if self.EPB_active is None:
        self.EPB_active = 0
      if self.EPB is None:
        self.EPB = 0
      if self.retarder_active is None:
        self.retarder_active = 0
      if self.retarder is None:
        self.retarder = 0.
      if self.gear_active is None:
        self.gear_active = 0
      if self.max_forward_gear is None:
        self.max_forward_gear = 0
      if self.gear is None:
        self.gear = 0
      if self.hang_active is None:
        self.hang_active = 0
      if self.hang is None:
        self.hang = 0
      if self.left is None:
        self.left = 0
      if self.right is None:
        self.right = 0
      if self.near is None:
        self.near = 0
      if self.far is None:
        self.far = 0
      if self.top_warn is None:
        self.top_warn = 0
      if self.air_beep is None:
        self.air_beep = 0
      if self.front_fog is None:
        self.front_fog = 0
      if self.front_work is None:
        self.front_work = 0
      if self.side is None:
        self.side = 0
      if self.position is None:
        self.position = 0
      if self.emergency is None:
        self.emergency = 0
      if self.brake is None:
        self.brake = 0
      if self.reverse is None:
        self.reverse = 0
      if self.back_work is None:
        self.back_work = 0
      if self.cooler is None:
        self.cooler = 0
      if self.axle_diff is None:
        self.axle_diff = 0
      if self.exhaust_brake is None:
        self.exhaust_brake = 0
    else:
      self.header = std_msgs.msg.Header()
      self.hands = ''
      self.EPB_active = 0
      self.EPB = 0
      self.retarder_active = 0
      self.retarder = 0.
      self.gear_active = 0
      self.max_forward_gear = 0
      self.gear = 0
      self.hang_active = 0
      self.hang = 0
      self.left = 0
      self.right = 0
      self.near = 0
      self.far = 0
      self.top_warn = 0
      self.air_beep = 0
      self.front_fog = 0
      self.front_work = 0
      self.side = 0
      self.position = 0
      self.emergency = 0
      self.brake = 0
      self.reverse = 0
      self.back_work = 0
      self.cooler = 0
      self.axle_diff = 0
      self.exhaust_brake = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.hands
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3Bd22B().pack(_x.EPB_active, _x.EPB, _x.retarder_active, _x.retarder, _x.gear_active, _x.max_forward_gear, _x.gear, _x.hang_active, _x.hang, _x.left, _x.right, _x.near, _x.far, _x.top_warn, _x.air_beep, _x.front_fog, _x.front_work, _x.side, _x.position, _x.emergency, _x.brake, _x.reverse, _x.back_work, _x.cooler, _x.axle_diff, _x.exhaust_brake))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.hands = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.hands = str[start:end]
      _x = self
      start = end
      end += 33
      (_x.EPB_active, _x.EPB, _x.retarder_active, _x.retarder, _x.gear_active, _x.max_forward_gear, _x.gear, _x.hang_active, _x.hang, _x.left, _x.right, _x.near, _x.far, _x.top_warn, _x.air_beep, _x.front_fog, _x.front_work, _x.side, _x.position, _x.emergency, _x.brake, _x.reverse, _x.back_work, _x.cooler, _x.axle_diff, _x.exhaust_brake,) = _get_struct_3Bd22B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.hands
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3Bd22B().pack(_x.EPB_active, _x.EPB, _x.retarder_active, _x.retarder, _x.gear_active, _x.max_forward_gear, _x.gear, _x.hang_active, _x.hang, _x.left, _x.right, _x.near, _x.far, _x.top_warn, _x.air_beep, _x.front_fog, _x.front_work, _x.side, _x.position, _x.emergency, _x.brake, _x.reverse, _x.back_work, _x.cooler, _x.axle_diff, _x.exhaust_brake))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.hands = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.hands = str[start:end]
      _x = self
      start = end
      end += 33
      (_x.EPB_active, _x.EPB, _x.retarder_active, _x.retarder, _x.gear_active, _x.max_forward_gear, _x.gear, _x.hang_active, _x.hang, _x.left, _x.right, _x.near, _x.far, _x.top_warn, _x.air_beep, _x.front_fog, _x.front_work, _x.side, _x.position, _x.emergency, _x.brake, _x.reverse, _x.back_work, _x.cooler, _x.axle_diff, _x.exhaust_brake,) = _get_struct_3Bd22B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3Bd22B = None
def _get_struct_3Bd22B():
    global _struct_3Bd22B
    if _struct_3Bd22B is None:
        _struct_3Bd22B = struct.Struct("<3Bd22B")
    return _struct_3Bd22B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
