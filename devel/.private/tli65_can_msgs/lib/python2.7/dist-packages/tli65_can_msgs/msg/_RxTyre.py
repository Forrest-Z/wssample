# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tli65_can_msgs/RxTyre.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class RxTyre(genpy.Message):
  _md5sum = "44acfc146651f84144777b20f26ca9a7"
  _type = "tli65_can_msgs/RxTyre"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

# tyre1
uint16 front_left_pressure
uint16 front_right_pressure
uint16 middle_left_outer_pressure
uint16 middle_left_inner_pressure
uint16 middle_right_inner_pressure
uint16 middle_right_outer_pressure
uint8 pressure_test_fault

# tyre2
uint16 back_left_outer_pressure
uint16 back_left_inner_pressure
uint16 back_right_inner_pressure
uint16 back_right_outer_pressure

# tyre3
float64 front_left_temperature
float64 front_right_temperature
uint8 front_temperature_test_fault
uint8 middle_back_temperature_test_fault

# tyre4
float64 middle_left_outer_temperature
float64 middle_left_inner_temperature
float64 middle_right_inner_temperature
float64 middle_right_outer_temperature

# tyre5
float64 back_left_outer_temperature
float64 back_left_inner_temperature
float64 back_right_inner_temperature
float64 back_right_outer_temperature
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','front_left_pressure','front_right_pressure','middle_left_outer_pressure','middle_left_inner_pressure','middle_right_inner_pressure','middle_right_outer_pressure','pressure_test_fault','back_left_outer_pressure','back_left_inner_pressure','back_right_inner_pressure','back_right_outer_pressure','front_left_temperature','front_right_temperature','front_temperature_test_fault','middle_back_temperature_test_fault','middle_left_outer_temperature','middle_left_inner_temperature','middle_right_inner_temperature','middle_right_outer_temperature','back_left_outer_temperature','back_left_inner_temperature','back_right_inner_temperature','back_right_outer_temperature']
  _slot_types = ['std_msgs/Header','uint16','uint16','uint16','uint16','uint16','uint16','uint8','uint16','uint16','uint16','uint16','float64','float64','uint8','uint8','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,front_left_pressure,front_right_pressure,middle_left_outer_pressure,middle_left_inner_pressure,middle_right_inner_pressure,middle_right_outer_pressure,pressure_test_fault,back_left_outer_pressure,back_left_inner_pressure,back_right_inner_pressure,back_right_outer_pressure,front_left_temperature,front_right_temperature,front_temperature_test_fault,middle_back_temperature_test_fault,middle_left_outer_temperature,middle_left_inner_temperature,middle_right_inner_temperature,middle_right_outer_temperature,back_left_outer_temperature,back_left_inner_temperature,back_right_inner_temperature,back_right_outer_temperature

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RxTyre, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.front_left_pressure is None:
        self.front_left_pressure = 0
      if self.front_right_pressure is None:
        self.front_right_pressure = 0
      if self.middle_left_outer_pressure is None:
        self.middle_left_outer_pressure = 0
      if self.middle_left_inner_pressure is None:
        self.middle_left_inner_pressure = 0
      if self.middle_right_inner_pressure is None:
        self.middle_right_inner_pressure = 0
      if self.middle_right_outer_pressure is None:
        self.middle_right_outer_pressure = 0
      if self.pressure_test_fault is None:
        self.pressure_test_fault = 0
      if self.back_left_outer_pressure is None:
        self.back_left_outer_pressure = 0
      if self.back_left_inner_pressure is None:
        self.back_left_inner_pressure = 0
      if self.back_right_inner_pressure is None:
        self.back_right_inner_pressure = 0
      if self.back_right_outer_pressure is None:
        self.back_right_outer_pressure = 0
      if self.front_left_temperature is None:
        self.front_left_temperature = 0.
      if self.front_right_temperature is None:
        self.front_right_temperature = 0.
      if self.front_temperature_test_fault is None:
        self.front_temperature_test_fault = 0
      if self.middle_back_temperature_test_fault is None:
        self.middle_back_temperature_test_fault = 0
      if self.middle_left_outer_temperature is None:
        self.middle_left_outer_temperature = 0.
      if self.middle_left_inner_temperature is None:
        self.middle_left_inner_temperature = 0.
      if self.middle_right_inner_temperature is None:
        self.middle_right_inner_temperature = 0.
      if self.middle_right_outer_temperature is None:
        self.middle_right_outer_temperature = 0.
      if self.back_left_outer_temperature is None:
        self.back_left_outer_temperature = 0.
      if self.back_left_inner_temperature is None:
        self.back_left_inner_temperature = 0.
      if self.back_right_inner_temperature is None:
        self.back_right_inner_temperature = 0.
      if self.back_right_outer_temperature is None:
        self.back_right_outer_temperature = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.front_left_pressure = 0
      self.front_right_pressure = 0
      self.middle_left_outer_pressure = 0
      self.middle_left_inner_pressure = 0
      self.middle_right_inner_pressure = 0
      self.middle_right_outer_pressure = 0
      self.pressure_test_fault = 0
      self.back_left_outer_pressure = 0
      self.back_left_inner_pressure = 0
      self.back_right_inner_pressure = 0
      self.back_right_outer_pressure = 0
      self.front_left_temperature = 0.
      self.front_right_temperature = 0.
      self.front_temperature_test_fault = 0
      self.middle_back_temperature_test_fault = 0
      self.middle_left_outer_temperature = 0.
      self.middle_left_inner_temperature = 0.
      self.middle_right_inner_temperature = 0.
      self.middle_right_outer_temperature = 0.
      self.back_left_outer_temperature = 0.
      self.back_left_inner_temperature = 0.
      self.back_right_inner_temperature = 0.
      self.back_right_outer_temperature = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6HB4H2d2B8d().pack(_x.front_left_pressure, _x.front_right_pressure, _x.middle_left_outer_pressure, _x.middle_left_inner_pressure, _x.middle_right_inner_pressure, _x.middle_right_outer_pressure, _x.pressure_test_fault, _x.back_left_outer_pressure, _x.back_left_inner_pressure, _x.back_right_inner_pressure, _x.back_right_outer_pressure, _x.front_left_temperature, _x.front_right_temperature, _x.front_temperature_test_fault, _x.middle_back_temperature_test_fault, _x.middle_left_outer_temperature, _x.middle_left_inner_temperature, _x.middle_right_inner_temperature, _x.middle_right_outer_temperature, _x.back_left_outer_temperature, _x.back_left_inner_temperature, _x.back_right_inner_temperature, _x.back_right_outer_temperature))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 103
      (_x.front_left_pressure, _x.front_right_pressure, _x.middle_left_outer_pressure, _x.middle_left_inner_pressure, _x.middle_right_inner_pressure, _x.middle_right_outer_pressure, _x.pressure_test_fault, _x.back_left_outer_pressure, _x.back_left_inner_pressure, _x.back_right_inner_pressure, _x.back_right_outer_pressure, _x.front_left_temperature, _x.front_right_temperature, _x.front_temperature_test_fault, _x.middle_back_temperature_test_fault, _x.middle_left_outer_temperature, _x.middle_left_inner_temperature, _x.middle_right_inner_temperature, _x.middle_right_outer_temperature, _x.back_left_outer_temperature, _x.back_left_inner_temperature, _x.back_right_inner_temperature, _x.back_right_outer_temperature,) = _get_struct_6HB4H2d2B8d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6HB4H2d2B8d().pack(_x.front_left_pressure, _x.front_right_pressure, _x.middle_left_outer_pressure, _x.middle_left_inner_pressure, _x.middle_right_inner_pressure, _x.middle_right_outer_pressure, _x.pressure_test_fault, _x.back_left_outer_pressure, _x.back_left_inner_pressure, _x.back_right_inner_pressure, _x.back_right_outer_pressure, _x.front_left_temperature, _x.front_right_temperature, _x.front_temperature_test_fault, _x.middle_back_temperature_test_fault, _x.middle_left_outer_temperature, _x.middle_left_inner_temperature, _x.middle_right_inner_temperature, _x.middle_right_outer_temperature, _x.back_left_outer_temperature, _x.back_left_inner_temperature, _x.back_right_inner_temperature, _x.back_right_outer_temperature))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 103
      (_x.front_left_pressure, _x.front_right_pressure, _x.middle_left_outer_pressure, _x.middle_left_inner_pressure, _x.middle_right_inner_pressure, _x.middle_right_outer_pressure, _x.pressure_test_fault, _x.back_left_outer_pressure, _x.back_left_inner_pressure, _x.back_right_inner_pressure, _x.back_right_outer_pressure, _x.front_left_temperature, _x.front_right_temperature, _x.front_temperature_test_fault, _x.middle_back_temperature_test_fault, _x.middle_left_outer_temperature, _x.middle_left_inner_temperature, _x.middle_right_inner_temperature, _x.middle_right_outer_temperature, _x.back_left_outer_temperature, _x.back_left_inner_temperature, _x.back_right_inner_temperature, _x.back_right_outer_temperature,) = _get_struct_6HB4H2d2B8d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_6HB4H2d2B8d = None
def _get_struct_6HB4H2d2B8d():
    global _struct_6HB4H2d2B8d
    if _struct_6HB4H2d2B8d is None:
        _struct_6HB4H2d2B8d = struct.Struct("<6HB4H2d2B8d")
    return _struct_6HB4H2d2B8d
