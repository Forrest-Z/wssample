# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tli65_can_msgs/RxStLowspeed.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class RxStLowspeed(genpy.Message):
  _md5sum = "c2e3c35f27ca2535b83cdc42bd76a652"
  _type = "tli65_can_msgs/RxStLowspeed"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

uint8 auto_mode
uint8 engine_active
uint8 hand_brake_active
uint8 EBS_active
uint8 retarder_active
uint8 EPS_active
uint8 hang_active

uint8 left_light
uint8 right_light
uint8 near_light
uint8 far_light
uint8 top_warning_light
uint8 air_beep
uint8 front_fog_light
uint8 front_work_light
uint8 side_light
uint8 position_light
uint8 back_left_light
uint8 back_right_light
uint8 back_position_light
uint8 brake_light
uint8 reverse_light
uint8 back_work_light

float64 air_pressure1
float64 air_pressure2
float64 oil_percentage

uint8 cooler1
uint8 cooler2
uint8 axle_diff_switch
uint8 drier_power
uint8 inclinometer_power
uint8 cold_water_treasure_power
uint8 exhaust_brake_switch
uint8 sweeper_power
uint8 EBS_power
uint8 air_pressure_power
uint8 hang_up_power
uint8 hang_down_power
uint8 hang_manual_power
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','auto_mode','engine_active','hand_brake_active','EBS_active','retarder_active','EPS_active','hang_active','left_light','right_light','near_light','far_light','top_warning_light','air_beep','front_fog_light','front_work_light','side_light','position_light','back_left_light','back_right_light','back_position_light','brake_light','reverse_light','back_work_light','air_pressure1','air_pressure2','oil_percentage','cooler1','cooler2','axle_diff_switch','drier_power','inclinometer_power','cold_water_treasure_power','exhaust_brake_switch','sweeper_power','EBS_power','air_pressure_power','hang_up_power','hang_down_power','hang_manual_power']
  _slot_types = ['std_msgs/Header','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','float64','float64','float64','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,auto_mode,engine_active,hand_brake_active,EBS_active,retarder_active,EPS_active,hang_active,left_light,right_light,near_light,far_light,top_warning_light,air_beep,front_fog_light,front_work_light,side_light,position_light,back_left_light,back_right_light,back_position_light,brake_light,reverse_light,back_work_light,air_pressure1,air_pressure2,oil_percentage,cooler1,cooler2,axle_diff_switch,drier_power,inclinometer_power,cold_water_treasure_power,exhaust_brake_switch,sweeper_power,EBS_power,air_pressure_power,hang_up_power,hang_down_power,hang_manual_power

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RxStLowspeed, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.auto_mode is None:
        self.auto_mode = 0
      if self.engine_active is None:
        self.engine_active = 0
      if self.hand_brake_active is None:
        self.hand_brake_active = 0
      if self.EBS_active is None:
        self.EBS_active = 0
      if self.retarder_active is None:
        self.retarder_active = 0
      if self.EPS_active is None:
        self.EPS_active = 0
      if self.hang_active is None:
        self.hang_active = 0
      if self.left_light is None:
        self.left_light = 0
      if self.right_light is None:
        self.right_light = 0
      if self.near_light is None:
        self.near_light = 0
      if self.far_light is None:
        self.far_light = 0
      if self.top_warning_light is None:
        self.top_warning_light = 0
      if self.air_beep is None:
        self.air_beep = 0
      if self.front_fog_light is None:
        self.front_fog_light = 0
      if self.front_work_light is None:
        self.front_work_light = 0
      if self.side_light is None:
        self.side_light = 0
      if self.position_light is None:
        self.position_light = 0
      if self.back_left_light is None:
        self.back_left_light = 0
      if self.back_right_light is None:
        self.back_right_light = 0
      if self.back_position_light is None:
        self.back_position_light = 0
      if self.brake_light is None:
        self.brake_light = 0
      if self.reverse_light is None:
        self.reverse_light = 0
      if self.back_work_light is None:
        self.back_work_light = 0
      if self.air_pressure1 is None:
        self.air_pressure1 = 0.
      if self.air_pressure2 is None:
        self.air_pressure2 = 0.
      if self.oil_percentage is None:
        self.oil_percentage = 0.
      if self.cooler1 is None:
        self.cooler1 = 0
      if self.cooler2 is None:
        self.cooler2 = 0
      if self.axle_diff_switch is None:
        self.axle_diff_switch = 0
      if self.drier_power is None:
        self.drier_power = 0
      if self.inclinometer_power is None:
        self.inclinometer_power = 0
      if self.cold_water_treasure_power is None:
        self.cold_water_treasure_power = 0
      if self.exhaust_brake_switch is None:
        self.exhaust_brake_switch = 0
      if self.sweeper_power is None:
        self.sweeper_power = 0
      if self.EBS_power is None:
        self.EBS_power = 0
      if self.air_pressure_power is None:
        self.air_pressure_power = 0
      if self.hang_up_power is None:
        self.hang_up_power = 0
      if self.hang_down_power is None:
        self.hang_down_power = 0
      if self.hang_manual_power is None:
        self.hang_manual_power = 0
    else:
      self.header = std_msgs.msg.Header()
      self.auto_mode = 0
      self.engine_active = 0
      self.hand_brake_active = 0
      self.EBS_active = 0
      self.retarder_active = 0
      self.EPS_active = 0
      self.hang_active = 0
      self.left_light = 0
      self.right_light = 0
      self.near_light = 0
      self.far_light = 0
      self.top_warning_light = 0
      self.air_beep = 0
      self.front_fog_light = 0
      self.front_work_light = 0
      self.side_light = 0
      self.position_light = 0
      self.back_left_light = 0
      self.back_right_light = 0
      self.back_position_light = 0
      self.brake_light = 0
      self.reverse_light = 0
      self.back_work_light = 0
      self.air_pressure1 = 0.
      self.air_pressure2 = 0.
      self.oil_percentage = 0.
      self.cooler1 = 0
      self.cooler2 = 0
      self.axle_diff_switch = 0
      self.drier_power = 0
      self.inclinometer_power = 0
      self.cold_water_treasure_power = 0
      self.exhaust_brake_switch = 0
      self.sweeper_power = 0
      self.EBS_power = 0
      self.air_pressure_power = 0
      self.hang_up_power = 0
      self.hang_down_power = 0
      self.hang_manual_power = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_23B3d13B().pack(_x.auto_mode, _x.engine_active, _x.hand_brake_active, _x.EBS_active, _x.retarder_active, _x.EPS_active, _x.hang_active, _x.left_light, _x.right_light, _x.near_light, _x.far_light, _x.top_warning_light, _x.air_beep, _x.front_fog_light, _x.front_work_light, _x.side_light, _x.position_light, _x.back_left_light, _x.back_right_light, _x.back_position_light, _x.brake_light, _x.reverse_light, _x.back_work_light, _x.air_pressure1, _x.air_pressure2, _x.oil_percentage, _x.cooler1, _x.cooler2, _x.axle_diff_switch, _x.drier_power, _x.inclinometer_power, _x.cold_water_treasure_power, _x.exhaust_brake_switch, _x.sweeper_power, _x.EBS_power, _x.air_pressure_power, _x.hang_up_power, _x.hang_down_power, _x.hang_manual_power))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.auto_mode, _x.engine_active, _x.hand_brake_active, _x.EBS_active, _x.retarder_active, _x.EPS_active, _x.hang_active, _x.left_light, _x.right_light, _x.near_light, _x.far_light, _x.top_warning_light, _x.air_beep, _x.front_fog_light, _x.front_work_light, _x.side_light, _x.position_light, _x.back_left_light, _x.back_right_light, _x.back_position_light, _x.brake_light, _x.reverse_light, _x.back_work_light, _x.air_pressure1, _x.air_pressure2, _x.oil_percentage, _x.cooler1, _x.cooler2, _x.axle_diff_switch, _x.drier_power, _x.inclinometer_power, _x.cold_water_treasure_power, _x.exhaust_brake_switch, _x.sweeper_power, _x.EBS_power, _x.air_pressure_power, _x.hang_up_power, _x.hang_down_power, _x.hang_manual_power,) = _get_struct_23B3d13B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_23B3d13B().pack(_x.auto_mode, _x.engine_active, _x.hand_brake_active, _x.EBS_active, _x.retarder_active, _x.EPS_active, _x.hang_active, _x.left_light, _x.right_light, _x.near_light, _x.far_light, _x.top_warning_light, _x.air_beep, _x.front_fog_light, _x.front_work_light, _x.side_light, _x.position_light, _x.back_left_light, _x.back_right_light, _x.back_position_light, _x.brake_light, _x.reverse_light, _x.back_work_light, _x.air_pressure1, _x.air_pressure2, _x.oil_percentage, _x.cooler1, _x.cooler2, _x.axle_diff_switch, _x.drier_power, _x.inclinometer_power, _x.cold_water_treasure_power, _x.exhaust_brake_switch, _x.sweeper_power, _x.EBS_power, _x.air_pressure_power, _x.hang_up_power, _x.hang_down_power, _x.hang_manual_power))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.auto_mode, _x.engine_active, _x.hand_brake_active, _x.EBS_active, _x.retarder_active, _x.EPS_active, _x.hang_active, _x.left_light, _x.right_light, _x.near_light, _x.far_light, _x.top_warning_light, _x.air_beep, _x.front_fog_light, _x.front_work_light, _x.side_light, _x.position_light, _x.back_left_light, _x.back_right_light, _x.back_position_light, _x.brake_light, _x.reverse_light, _x.back_work_light, _x.air_pressure1, _x.air_pressure2, _x.oil_percentage, _x.cooler1, _x.cooler2, _x.axle_diff_switch, _x.drier_power, _x.inclinometer_power, _x.cold_water_treasure_power, _x.exhaust_brake_switch, _x.sweeper_power, _x.EBS_power, _x.air_pressure_power, _x.hang_up_power, _x.hang_down_power, _x.hang_manual_power,) = _get_struct_23B3d13B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_23B3d13B = None
def _get_struct_23B3d13B():
    global _struct_23B3d13B
    if _struct_23B3d13B is None:
        _struct_23B3d13B = struct.Struct("<23B3d13B")
    return _struct_23B3d13B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
