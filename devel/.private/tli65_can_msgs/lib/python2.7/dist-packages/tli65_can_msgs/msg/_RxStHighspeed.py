# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tli65_can_msgs/RxStHighspeed.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class RxStHighspeed(genpy.Message):
  _md5sum = "d6667d21888a890c2ee6ca8cc4b0a4e9"
  _type = "tli65_can_msgs/RxStHighspeed"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

int8 throttle_pedal_pos
int8 engine_torque_percentage
int32 engine_speed
int8 actual_throttle_pedal_pos
int8 brake_pedal_pos
int8 retarder_torque_percentage
int32 steer_angle
int32 electric_steer_torque
int32 steer_angle_rate
float64 speed_from_gear
uint8 gear_active
int8 max_forward_gear
int8 gear

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','throttle_pedal_pos','engine_torque_percentage','engine_speed','actual_throttle_pedal_pos','brake_pedal_pos','retarder_torque_percentage','steer_angle','electric_steer_torque','steer_angle_rate','speed_from_gear','gear_active','max_forward_gear','gear']
  _slot_types = ['std_msgs/Header','int8','int8','int32','int8','int8','int8','int32','int32','int32','float64','uint8','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,throttle_pedal_pos,engine_torque_percentage,engine_speed,actual_throttle_pedal_pos,brake_pedal_pos,retarder_torque_percentage,steer_angle,electric_steer_torque,steer_angle_rate,speed_from_gear,gear_active,max_forward_gear,gear

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RxStHighspeed, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.throttle_pedal_pos is None:
        self.throttle_pedal_pos = 0
      if self.engine_torque_percentage is None:
        self.engine_torque_percentage = 0
      if self.engine_speed is None:
        self.engine_speed = 0
      if self.actual_throttle_pedal_pos is None:
        self.actual_throttle_pedal_pos = 0
      if self.brake_pedal_pos is None:
        self.brake_pedal_pos = 0
      if self.retarder_torque_percentage is None:
        self.retarder_torque_percentage = 0
      if self.steer_angle is None:
        self.steer_angle = 0
      if self.electric_steer_torque is None:
        self.electric_steer_torque = 0
      if self.steer_angle_rate is None:
        self.steer_angle_rate = 0
      if self.speed_from_gear is None:
        self.speed_from_gear = 0.
      if self.gear_active is None:
        self.gear_active = 0
      if self.max_forward_gear is None:
        self.max_forward_gear = 0
      if self.gear is None:
        self.gear = 0
    else:
      self.header = std_msgs.msg.Header()
      self.throttle_pedal_pos = 0
      self.engine_torque_percentage = 0
      self.engine_speed = 0
      self.actual_throttle_pedal_pos = 0
      self.brake_pedal_pos = 0
      self.retarder_torque_percentage = 0
      self.steer_angle = 0
      self.electric_steer_torque = 0
      self.steer_angle_rate = 0
      self.speed_from_gear = 0.
      self.gear_active = 0
      self.max_forward_gear = 0
      self.gear = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2bi3b3idB2b().pack(_x.throttle_pedal_pos, _x.engine_torque_percentage, _x.engine_speed, _x.actual_throttle_pedal_pos, _x.brake_pedal_pos, _x.retarder_torque_percentage, _x.steer_angle, _x.electric_steer_torque, _x.steer_angle_rate, _x.speed_from_gear, _x.gear_active, _x.max_forward_gear, _x.gear))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.throttle_pedal_pos, _x.engine_torque_percentage, _x.engine_speed, _x.actual_throttle_pedal_pos, _x.brake_pedal_pos, _x.retarder_torque_percentage, _x.steer_angle, _x.electric_steer_torque, _x.steer_angle_rate, _x.speed_from_gear, _x.gear_active, _x.max_forward_gear, _x.gear,) = _get_struct_2bi3b3idB2b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2bi3b3idB2b().pack(_x.throttle_pedal_pos, _x.engine_torque_percentage, _x.engine_speed, _x.actual_throttle_pedal_pos, _x.brake_pedal_pos, _x.retarder_torque_percentage, _x.steer_angle, _x.electric_steer_torque, _x.steer_angle_rate, _x.speed_from_gear, _x.gear_active, _x.max_forward_gear, _x.gear))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.throttle_pedal_pos, _x.engine_torque_percentage, _x.engine_speed, _x.actual_throttle_pedal_pos, _x.brake_pedal_pos, _x.retarder_torque_percentage, _x.steer_angle, _x.electric_steer_torque, _x.steer_angle_rate, _x.speed_from_gear, _x.gear_active, _x.max_forward_gear, _x.gear,) = _get_struct_2bi3b3idB2b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2bi3b3idB2b = None
def _get_struct_2bi3b3idB2b():
    global _struct_2bi3b3idB2b
    if _struct_2bi3b3idB2b is None:
        _struct_2bi3b3idB2b = struct.Struct("<2bi3b3idB2b")
    return _struct_2bi3b3idB2b
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
