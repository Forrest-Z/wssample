// Generated by gencpp from file tli65_can_msgs/RxStLowspeed.msg
// DO NOT EDIT!


#ifndef TLI65_CAN_MSGS_MESSAGE_RXSTLOWSPEED_H
#define TLI65_CAN_MSGS_MESSAGE_RXSTLOWSPEED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace tli65_can_msgs
{
template <class ContainerAllocator>
struct RxStLowspeed_
{
  typedef RxStLowspeed_<ContainerAllocator> Type;

  RxStLowspeed_()
    : header()
    , auto_mode(0)
    , engine_active(0)
    , hand_brake_active(0)
    , EBS_active(0)
    , retarder_active(0)
    , EPS_active(0)
    , hang_active(0)
    , left_light(0)
    , right_light(0)
    , near_light(0)
    , far_light(0)
    , top_warning_light(0)
    , air_beep(0)
    , front_fog_light(0)
    , front_work_light(0)
    , side_light(0)
    , position_light(0)
    , back_left_light(0)
    , back_right_light(0)
    , back_position_light(0)
    , brake_light(0)
    , reverse_light(0)
    , back_work_light(0)
    , air_pressure1(0.0)
    , air_pressure2(0.0)
    , oil_percentage(0.0)
    , cooler1(0)
    , cooler2(0)
    , axle_diff_switch(0)
    , drier_power(0)
    , inclinometer_power(0)
    , cold_water_treasure_power(0)
    , exhaust_brake_switch(0)
    , sweeper_power(0)
    , EBS_power(0)
    , air_pressure_power(0)
    , hang_up_power(0)
    , hang_down_power(0)
    , hang_manual_power(0)  {
    }
  RxStLowspeed_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , auto_mode(0)
    , engine_active(0)
    , hand_brake_active(0)
    , EBS_active(0)
    , retarder_active(0)
    , EPS_active(0)
    , hang_active(0)
    , left_light(0)
    , right_light(0)
    , near_light(0)
    , far_light(0)
    , top_warning_light(0)
    , air_beep(0)
    , front_fog_light(0)
    , front_work_light(0)
    , side_light(0)
    , position_light(0)
    , back_left_light(0)
    , back_right_light(0)
    , back_position_light(0)
    , brake_light(0)
    , reverse_light(0)
    , back_work_light(0)
    , air_pressure1(0.0)
    , air_pressure2(0.0)
    , oil_percentage(0.0)
    , cooler1(0)
    , cooler2(0)
    , axle_diff_switch(0)
    , drier_power(0)
    , inclinometer_power(0)
    , cold_water_treasure_power(0)
    , exhaust_brake_switch(0)
    , sweeper_power(0)
    , EBS_power(0)
    , air_pressure_power(0)
    , hang_up_power(0)
    , hang_down_power(0)
    , hang_manual_power(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _auto_mode_type;
  _auto_mode_type auto_mode;

   typedef uint8_t _engine_active_type;
  _engine_active_type engine_active;

   typedef uint8_t _hand_brake_active_type;
  _hand_brake_active_type hand_brake_active;

   typedef uint8_t _EBS_active_type;
  _EBS_active_type EBS_active;

   typedef uint8_t _retarder_active_type;
  _retarder_active_type retarder_active;

   typedef uint8_t _EPS_active_type;
  _EPS_active_type EPS_active;

   typedef uint8_t _hang_active_type;
  _hang_active_type hang_active;

   typedef uint8_t _left_light_type;
  _left_light_type left_light;

   typedef uint8_t _right_light_type;
  _right_light_type right_light;

   typedef uint8_t _near_light_type;
  _near_light_type near_light;

   typedef uint8_t _far_light_type;
  _far_light_type far_light;

   typedef uint8_t _top_warning_light_type;
  _top_warning_light_type top_warning_light;

   typedef uint8_t _air_beep_type;
  _air_beep_type air_beep;

   typedef uint8_t _front_fog_light_type;
  _front_fog_light_type front_fog_light;

   typedef uint8_t _front_work_light_type;
  _front_work_light_type front_work_light;

   typedef uint8_t _side_light_type;
  _side_light_type side_light;

   typedef uint8_t _position_light_type;
  _position_light_type position_light;

   typedef uint8_t _back_left_light_type;
  _back_left_light_type back_left_light;

   typedef uint8_t _back_right_light_type;
  _back_right_light_type back_right_light;

   typedef uint8_t _back_position_light_type;
  _back_position_light_type back_position_light;

   typedef uint8_t _brake_light_type;
  _brake_light_type brake_light;

   typedef uint8_t _reverse_light_type;
  _reverse_light_type reverse_light;

   typedef uint8_t _back_work_light_type;
  _back_work_light_type back_work_light;

   typedef double _air_pressure1_type;
  _air_pressure1_type air_pressure1;

   typedef double _air_pressure2_type;
  _air_pressure2_type air_pressure2;

   typedef double _oil_percentage_type;
  _oil_percentage_type oil_percentage;

   typedef uint8_t _cooler1_type;
  _cooler1_type cooler1;

   typedef uint8_t _cooler2_type;
  _cooler2_type cooler2;

   typedef uint8_t _axle_diff_switch_type;
  _axle_diff_switch_type axle_diff_switch;

   typedef uint8_t _drier_power_type;
  _drier_power_type drier_power;

   typedef uint8_t _inclinometer_power_type;
  _inclinometer_power_type inclinometer_power;

   typedef uint8_t _cold_water_treasure_power_type;
  _cold_water_treasure_power_type cold_water_treasure_power;

   typedef uint8_t _exhaust_brake_switch_type;
  _exhaust_brake_switch_type exhaust_brake_switch;

   typedef uint8_t _sweeper_power_type;
  _sweeper_power_type sweeper_power;

   typedef uint8_t _EBS_power_type;
  _EBS_power_type EBS_power;

   typedef uint8_t _air_pressure_power_type;
  _air_pressure_power_type air_pressure_power;

   typedef uint8_t _hang_up_power_type;
  _hang_up_power_type hang_up_power;

   typedef uint8_t _hang_down_power_type;
  _hang_down_power_type hang_down_power;

   typedef uint8_t _hang_manual_power_type;
  _hang_manual_power_type hang_manual_power;





  typedef boost::shared_ptr< ::tli65_can_msgs::RxStLowspeed_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tli65_can_msgs::RxStLowspeed_<ContainerAllocator> const> ConstPtr;

}; // struct RxStLowspeed_

typedef ::tli65_can_msgs::RxStLowspeed_<std::allocator<void> > RxStLowspeed;

typedef boost::shared_ptr< ::tli65_can_msgs::RxStLowspeed > RxStLowspeedPtr;
typedef boost::shared_ptr< ::tli65_can_msgs::RxStLowspeed const> RxStLowspeedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tli65_can_msgs::RxStLowspeed_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tli65_can_msgs::RxStLowspeed_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace tli65_can_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'can_msgs': ['/opt/ros/kinetic/share/can_msgs/cmake/../msg'], 'tli65_can_msgs': ['/home/oligay_61/zone3/src/message/tli65_can_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::tli65_can_msgs::RxStLowspeed_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tli65_can_msgs::RxStLowspeed_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tli65_can_msgs::RxStLowspeed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tli65_can_msgs::RxStLowspeed_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tli65_can_msgs::RxStLowspeed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tli65_can_msgs::RxStLowspeed_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tli65_can_msgs::RxStLowspeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c2e3c35f27ca2535b83cdc42bd76a652";
  }

  static const char* value(const ::tli65_can_msgs::RxStLowspeed_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc2e3c35f27ca2535ULL;
  static const uint64_t static_value2 = 0xb83cdc42bd76a652ULL;
};

template<class ContainerAllocator>
struct DataType< ::tli65_can_msgs::RxStLowspeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tli65_can_msgs/RxStLowspeed";
  }

  static const char* value(const ::tli65_can_msgs::RxStLowspeed_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tli65_can_msgs::RxStLowspeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
uint8 auto_mode\n\
uint8 engine_active\n\
uint8 hand_brake_active\n\
uint8 EBS_active\n\
uint8 retarder_active\n\
uint8 EPS_active\n\
uint8 hang_active\n\
\n\
uint8 left_light\n\
uint8 right_light\n\
uint8 near_light\n\
uint8 far_light\n\
uint8 top_warning_light\n\
uint8 air_beep\n\
uint8 front_fog_light\n\
uint8 front_work_light\n\
uint8 side_light\n\
uint8 position_light\n\
uint8 back_left_light\n\
uint8 back_right_light\n\
uint8 back_position_light\n\
uint8 brake_light\n\
uint8 reverse_light\n\
uint8 back_work_light\n\
\n\
float64 air_pressure1\n\
float64 air_pressure2\n\
float64 oil_percentage\n\
\n\
uint8 cooler1\n\
uint8 cooler2\n\
uint8 axle_diff_switch\n\
uint8 drier_power\n\
uint8 inclinometer_power\n\
uint8 cold_water_treasure_power\n\
uint8 exhaust_brake_switch\n\
uint8 sweeper_power\n\
uint8 EBS_power\n\
uint8 air_pressure_power\n\
uint8 hang_up_power\n\
uint8 hang_down_power\n\
uint8 hang_manual_power\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::tli65_can_msgs::RxStLowspeed_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tli65_can_msgs::RxStLowspeed_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.auto_mode);
      stream.next(m.engine_active);
      stream.next(m.hand_brake_active);
      stream.next(m.EBS_active);
      stream.next(m.retarder_active);
      stream.next(m.EPS_active);
      stream.next(m.hang_active);
      stream.next(m.left_light);
      stream.next(m.right_light);
      stream.next(m.near_light);
      stream.next(m.far_light);
      stream.next(m.top_warning_light);
      stream.next(m.air_beep);
      stream.next(m.front_fog_light);
      stream.next(m.front_work_light);
      stream.next(m.side_light);
      stream.next(m.position_light);
      stream.next(m.back_left_light);
      stream.next(m.back_right_light);
      stream.next(m.back_position_light);
      stream.next(m.brake_light);
      stream.next(m.reverse_light);
      stream.next(m.back_work_light);
      stream.next(m.air_pressure1);
      stream.next(m.air_pressure2);
      stream.next(m.oil_percentage);
      stream.next(m.cooler1);
      stream.next(m.cooler2);
      stream.next(m.axle_diff_switch);
      stream.next(m.drier_power);
      stream.next(m.inclinometer_power);
      stream.next(m.cold_water_treasure_power);
      stream.next(m.exhaust_brake_switch);
      stream.next(m.sweeper_power);
      stream.next(m.EBS_power);
      stream.next(m.air_pressure_power);
      stream.next(m.hang_up_power);
      stream.next(m.hang_down_power);
      stream.next(m.hang_manual_power);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RxStLowspeed_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tli65_can_msgs::RxStLowspeed_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tli65_can_msgs::RxStLowspeed_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "auto_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.auto_mode);
    s << indent << "engine_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.engine_active);
    s << indent << "hand_brake_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hand_brake_active);
    s << indent << "EBS_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EBS_active);
    s << indent << "retarder_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.retarder_active);
    s << indent << "EPS_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EPS_active);
    s << indent << "hang_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hang_active);
    s << indent << "left_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left_light);
    s << indent << "right_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right_light);
    s << indent << "near_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.near_light);
    s << indent << "far_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.far_light);
    s << indent << "top_warning_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.top_warning_light);
    s << indent << "air_beep: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.air_beep);
    s << indent << "front_fog_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.front_fog_light);
    s << indent << "front_work_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.front_work_light);
    s << indent << "side_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.side_light);
    s << indent << "position_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.position_light);
    s << indent << "back_left_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.back_left_light);
    s << indent << "back_right_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.back_right_light);
    s << indent << "back_position_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.back_position_light);
    s << indent << "brake_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brake_light);
    s << indent << "reverse_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reverse_light);
    s << indent << "back_work_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.back_work_light);
    s << indent << "air_pressure1: ";
    Printer<double>::stream(s, indent + "  ", v.air_pressure1);
    s << indent << "air_pressure2: ";
    Printer<double>::stream(s, indent + "  ", v.air_pressure2);
    s << indent << "oil_percentage: ";
    Printer<double>::stream(s, indent + "  ", v.oil_percentage);
    s << indent << "cooler1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cooler1);
    s << indent << "cooler2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cooler2);
    s << indent << "axle_diff_switch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.axle_diff_switch);
    s << indent << "drier_power: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.drier_power);
    s << indent << "inclinometer_power: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.inclinometer_power);
    s << indent << "cold_water_treasure_power: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cold_water_treasure_power);
    s << indent << "exhaust_brake_switch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.exhaust_brake_switch);
    s << indent << "sweeper_power: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sweeper_power);
    s << indent << "EBS_power: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EBS_power);
    s << indent << "air_pressure_power: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.air_pressure_power);
    s << indent << "hang_up_power: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hang_up_power);
    s << indent << "hang_down_power: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hang_down_power);
    s << indent << "hang_manual_power: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hang_manual_power);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TLI65_CAN_MSGS_MESSAGE_RXSTLOWSPEED_H
