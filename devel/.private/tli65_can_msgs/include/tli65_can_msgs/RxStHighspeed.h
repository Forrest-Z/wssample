// Generated by gencpp from file tli65_can_msgs/RxStHighspeed.msg
// DO NOT EDIT!


#ifndef TLI65_CAN_MSGS_MESSAGE_RXSTHIGHSPEED_H
#define TLI65_CAN_MSGS_MESSAGE_RXSTHIGHSPEED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace tli65_can_msgs
{
template <class ContainerAllocator>
struct RxStHighspeed_
{
  typedef RxStHighspeed_<ContainerAllocator> Type;

  RxStHighspeed_()
    : header()
    , throttle_pedal_pos(0)
    , engine_torque_percentage(0)
    , engine_speed(0)
    , actual_throttle_pedal_pos(0)
    , brake_pedal_pos(0)
    , retarder_torque_percentage(0)
    , steer_angle(0)
    , electric_steer_torque(0)
    , steer_angle_rate(0)
    , speed_from_gear(0.0)
    , gear_active(0)
    , max_forward_gear(0)
    , gear(0)  {
    }
  RxStHighspeed_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , throttle_pedal_pos(0)
    , engine_torque_percentage(0)
    , engine_speed(0)
    , actual_throttle_pedal_pos(0)
    , brake_pedal_pos(0)
    , retarder_torque_percentage(0)
    , steer_angle(0)
    , electric_steer_torque(0)
    , steer_angle_rate(0)
    , speed_from_gear(0.0)
    , gear_active(0)
    , max_forward_gear(0)
    , gear(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int8_t _throttle_pedal_pos_type;
  _throttle_pedal_pos_type throttle_pedal_pos;

   typedef int8_t _engine_torque_percentage_type;
  _engine_torque_percentage_type engine_torque_percentage;

   typedef int32_t _engine_speed_type;
  _engine_speed_type engine_speed;

   typedef int8_t _actual_throttle_pedal_pos_type;
  _actual_throttle_pedal_pos_type actual_throttle_pedal_pos;

   typedef int8_t _brake_pedal_pos_type;
  _brake_pedal_pos_type brake_pedal_pos;

   typedef int8_t _retarder_torque_percentage_type;
  _retarder_torque_percentage_type retarder_torque_percentage;

   typedef int32_t _steer_angle_type;
  _steer_angle_type steer_angle;

   typedef int32_t _electric_steer_torque_type;
  _electric_steer_torque_type electric_steer_torque;

   typedef int32_t _steer_angle_rate_type;
  _steer_angle_rate_type steer_angle_rate;

   typedef double _speed_from_gear_type;
  _speed_from_gear_type speed_from_gear;

   typedef uint8_t _gear_active_type;
  _gear_active_type gear_active;

   typedef int8_t _max_forward_gear_type;
  _max_forward_gear_type max_forward_gear;

   typedef int8_t _gear_type;
  _gear_type gear;





  typedef boost::shared_ptr< ::tli65_can_msgs::RxStHighspeed_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tli65_can_msgs::RxStHighspeed_<ContainerAllocator> const> ConstPtr;

}; // struct RxStHighspeed_

typedef ::tli65_can_msgs::RxStHighspeed_<std::allocator<void> > RxStHighspeed;

typedef boost::shared_ptr< ::tli65_can_msgs::RxStHighspeed > RxStHighspeedPtr;
typedef boost::shared_ptr< ::tli65_can_msgs::RxStHighspeed const> RxStHighspeedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tli65_can_msgs::RxStHighspeed_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tli65_can_msgs::RxStHighspeed_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace tli65_can_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'can_msgs': ['/opt/ros/kinetic/share/can_msgs/cmake/../msg'], 'tli65_can_msgs': ['/home/oligay_61/zone3/src/message/tli65_can_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::tli65_can_msgs::RxStHighspeed_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tli65_can_msgs::RxStHighspeed_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tli65_can_msgs::RxStHighspeed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tli65_can_msgs::RxStHighspeed_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tli65_can_msgs::RxStHighspeed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tli65_can_msgs::RxStHighspeed_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tli65_can_msgs::RxStHighspeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d6667d21888a890c2ee6ca8cc4b0a4e9";
  }

  static const char* value(const ::tli65_can_msgs::RxStHighspeed_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd6667d21888a890cULL;
  static const uint64_t static_value2 = 0x2ee6ca8cc4b0a4e9ULL;
};

template<class ContainerAllocator>
struct DataType< ::tli65_can_msgs::RxStHighspeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tli65_can_msgs/RxStHighspeed";
  }

  static const char* value(const ::tli65_can_msgs::RxStHighspeed_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tli65_can_msgs::RxStHighspeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
int8 throttle_pedal_pos\n\
int8 engine_torque_percentage\n\
int32 engine_speed\n\
int8 actual_throttle_pedal_pos\n\
int8 brake_pedal_pos\n\
int8 retarder_torque_percentage\n\
int32 steer_angle\n\
int32 electric_steer_torque\n\
int32 steer_angle_rate\n\
float64 speed_from_gear\n\
uint8 gear_active\n\
int8 max_forward_gear\n\
int8 gear\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::tli65_can_msgs::RxStHighspeed_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tli65_can_msgs::RxStHighspeed_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.throttle_pedal_pos);
      stream.next(m.engine_torque_percentage);
      stream.next(m.engine_speed);
      stream.next(m.actual_throttle_pedal_pos);
      stream.next(m.brake_pedal_pos);
      stream.next(m.retarder_torque_percentage);
      stream.next(m.steer_angle);
      stream.next(m.electric_steer_torque);
      stream.next(m.steer_angle_rate);
      stream.next(m.speed_from_gear);
      stream.next(m.gear_active);
      stream.next(m.max_forward_gear);
      stream.next(m.gear);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RxStHighspeed_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tli65_can_msgs::RxStHighspeed_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tli65_can_msgs::RxStHighspeed_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "throttle_pedal_pos: ";
    Printer<int8_t>::stream(s, indent + "  ", v.throttle_pedal_pos);
    s << indent << "engine_torque_percentage: ";
    Printer<int8_t>::stream(s, indent + "  ", v.engine_torque_percentage);
    s << indent << "engine_speed: ";
    Printer<int32_t>::stream(s, indent + "  ", v.engine_speed);
    s << indent << "actual_throttle_pedal_pos: ";
    Printer<int8_t>::stream(s, indent + "  ", v.actual_throttle_pedal_pos);
    s << indent << "brake_pedal_pos: ";
    Printer<int8_t>::stream(s, indent + "  ", v.brake_pedal_pos);
    s << indent << "retarder_torque_percentage: ";
    Printer<int8_t>::stream(s, indent + "  ", v.retarder_torque_percentage);
    s << indent << "steer_angle: ";
    Printer<int32_t>::stream(s, indent + "  ", v.steer_angle);
    s << indent << "electric_steer_torque: ";
    Printer<int32_t>::stream(s, indent + "  ", v.electric_steer_torque);
    s << indent << "steer_angle_rate: ";
    Printer<int32_t>::stream(s, indent + "  ", v.steer_angle_rate);
    s << indent << "speed_from_gear: ";
    Printer<double>::stream(s, indent + "  ", v.speed_from_gear);
    s << indent << "gear_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gear_active);
    s << indent << "max_forward_gear: ";
    Printer<int8_t>::stream(s, indent + "  ", v.max_forward_gear);
    s << indent << "gear: ";
    Printer<int8_t>::stream(s, indent + "  ", v.gear);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TLI65_CAN_MSGS_MESSAGE_RXSTHIGHSPEED_H
