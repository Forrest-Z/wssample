# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from teledrive_msgs/Tli65Teledrive.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Tli65Teledrive(genpy.Message):
  _md5sum = "2039e574d82f1c10ec3f95ef9b8ec5ce"
  _type = "teledrive_msgs/Tli65Teledrive"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string control_type

float64 steer
float64 throttle_pedal
float64 xbr
int32 gear
int32 epb
int32 hang
bool air_beep
bool left_light
bool right_light
bool near_light
bool far_light

#TL lights state
bool top_warning_light
bool front_fog_light
bool front_work_light
bool back_work_light
bool side_light
bool position_light
bool emergency_light
bool brake_light
bool reverse_light"""
  __slots__ = ['control_type','steer','throttle_pedal','xbr','gear','epb','hang','air_beep','left_light','right_light','near_light','far_light','top_warning_light','front_fog_light','front_work_light','back_work_light','side_light','position_light','emergency_light','brake_light','reverse_light']
  _slot_types = ['string','float64','float64','float64','int32','int32','int32','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       control_type,steer,throttle_pedal,xbr,gear,epb,hang,air_beep,left_light,right_light,near_light,far_light,top_warning_light,front_fog_light,front_work_light,back_work_light,side_light,position_light,emergency_light,brake_light,reverse_light

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Tli65Teledrive, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.control_type is None:
        self.control_type = ''
      if self.steer is None:
        self.steer = 0.
      if self.throttle_pedal is None:
        self.throttle_pedal = 0.
      if self.xbr is None:
        self.xbr = 0.
      if self.gear is None:
        self.gear = 0
      if self.epb is None:
        self.epb = 0
      if self.hang is None:
        self.hang = 0
      if self.air_beep is None:
        self.air_beep = False
      if self.left_light is None:
        self.left_light = False
      if self.right_light is None:
        self.right_light = False
      if self.near_light is None:
        self.near_light = False
      if self.far_light is None:
        self.far_light = False
      if self.top_warning_light is None:
        self.top_warning_light = False
      if self.front_fog_light is None:
        self.front_fog_light = False
      if self.front_work_light is None:
        self.front_work_light = False
      if self.back_work_light is None:
        self.back_work_light = False
      if self.side_light is None:
        self.side_light = False
      if self.position_light is None:
        self.position_light = False
      if self.emergency_light is None:
        self.emergency_light = False
      if self.brake_light is None:
        self.brake_light = False
      if self.reverse_light is None:
        self.reverse_light = False
    else:
      self.control_type = ''
      self.steer = 0.
      self.throttle_pedal = 0.
      self.xbr = 0.
      self.gear = 0
      self.epb = 0
      self.hang = 0
      self.air_beep = False
      self.left_light = False
      self.right_light = False
      self.near_light = False
      self.far_light = False
      self.top_warning_light = False
      self.front_fog_light = False
      self.front_work_light = False
      self.back_work_light = False
      self.side_light = False
      self.position_light = False
      self.emergency_light = False
      self.brake_light = False
      self.reverse_light = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.control_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3d3i14B().pack(_x.steer, _x.throttle_pedal, _x.xbr, _x.gear, _x.epb, _x.hang, _x.air_beep, _x.left_light, _x.right_light, _x.near_light, _x.far_light, _x.top_warning_light, _x.front_fog_light, _x.front_work_light, _x.back_work_light, _x.side_light, _x.position_light, _x.emergency_light, _x.brake_light, _x.reverse_light))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.control_type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.control_type = str[start:end]
      _x = self
      start = end
      end += 50
      (_x.steer, _x.throttle_pedal, _x.xbr, _x.gear, _x.epb, _x.hang, _x.air_beep, _x.left_light, _x.right_light, _x.near_light, _x.far_light, _x.top_warning_light, _x.front_fog_light, _x.front_work_light, _x.back_work_light, _x.side_light, _x.position_light, _x.emergency_light, _x.brake_light, _x.reverse_light,) = _get_struct_3d3i14B().unpack(str[start:end])
      self.air_beep = bool(self.air_beep)
      self.left_light = bool(self.left_light)
      self.right_light = bool(self.right_light)
      self.near_light = bool(self.near_light)
      self.far_light = bool(self.far_light)
      self.top_warning_light = bool(self.top_warning_light)
      self.front_fog_light = bool(self.front_fog_light)
      self.front_work_light = bool(self.front_work_light)
      self.back_work_light = bool(self.back_work_light)
      self.side_light = bool(self.side_light)
      self.position_light = bool(self.position_light)
      self.emergency_light = bool(self.emergency_light)
      self.brake_light = bool(self.brake_light)
      self.reverse_light = bool(self.reverse_light)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.control_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3d3i14B().pack(_x.steer, _x.throttle_pedal, _x.xbr, _x.gear, _x.epb, _x.hang, _x.air_beep, _x.left_light, _x.right_light, _x.near_light, _x.far_light, _x.top_warning_light, _x.front_fog_light, _x.front_work_light, _x.back_work_light, _x.side_light, _x.position_light, _x.emergency_light, _x.brake_light, _x.reverse_light))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.control_type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.control_type = str[start:end]
      _x = self
      start = end
      end += 50
      (_x.steer, _x.throttle_pedal, _x.xbr, _x.gear, _x.epb, _x.hang, _x.air_beep, _x.left_light, _x.right_light, _x.near_light, _x.far_light, _x.top_warning_light, _x.front_fog_light, _x.front_work_light, _x.back_work_light, _x.side_light, _x.position_light, _x.emergency_light, _x.brake_light, _x.reverse_light,) = _get_struct_3d3i14B().unpack(str[start:end])
      self.air_beep = bool(self.air_beep)
      self.left_light = bool(self.left_light)
      self.right_light = bool(self.right_light)
      self.near_light = bool(self.near_light)
      self.far_light = bool(self.far_light)
      self.top_warning_light = bool(self.top_warning_light)
      self.front_fog_light = bool(self.front_fog_light)
      self.front_work_light = bool(self.front_work_light)
      self.back_work_light = bool(self.back_work_light)
      self.side_light = bool(self.side_light)
      self.position_light = bool(self.position_light)
      self.emergency_light = bool(self.emergency_light)
      self.brake_light = bool(self.brake_light)
      self.reverse_light = bool(self.reverse_light)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d3i14B = None
def _get_struct_3d3i14B():
    global _struct_3d3i14B
    if _struct_3d3i14B is None:
        _struct_3d3i14B = struct.Struct("<3d3i14B")
    return _struct_3d3i14B
