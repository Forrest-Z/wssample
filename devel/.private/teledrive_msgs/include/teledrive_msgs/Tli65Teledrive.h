// Generated by gencpp from file teledrive_msgs/Tli65Teledrive.msg
// DO NOT EDIT!


#ifndef TELEDRIVE_MSGS_MESSAGE_TLI65TELEDRIVE_H
#define TELEDRIVE_MSGS_MESSAGE_TLI65TELEDRIVE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace teledrive_msgs
{
template <class ContainerAllocator>
struct Tli65Teledrive_
{
  typedef Tli65Teledrive_<ContainerAllocator> Type;

  Tli65Teledrive_()
    : control_type()
    , steer(0.0)
    , throttle_pedal(0.0)
    , xbr(0.0)
    , gear(0)
    , epb(0)
    , hang(0)
    , air_beep(false)
    , left_light(false)
    , right_light(false)
    , near_light(false)
    , far_light(false)
    , top_warning_light(false)
    , front_fog_light(false)
    , front_work_light(false)
    , back_work_light(false)
    , side_light(false)
    , position_light(false)
    , emergency_light(false)
    , brake_light(false)
    , reverse_light(false)  {
    }
  Tli65Teledrive_(const ContainerAllocator& _alloc)
    : control_type(_alloc)
    , steer(0.0)
    , throttle_pedal(0.0)
    , xbr(0.0)
    , gear(0)
    , epb(0)
    , hang(0)
    , air_beep(false)
    , left_light(false)
    , right_light(false)
    , near_light(false)
    , far_light(false)
    , top_warning_light(false)
    , front_fog_light(false)
    , front_work_light(false)
    , back_work_light(false)
    , side_light(false)
    , position_light(false)
    , emergency_light(false)
    , brake_light(false)
    , reverse_light(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _control_type_type;
  _control_type_type control_type;

   typedef double _steer_type;
  _steer_type steer;

   typedef double _throttle_pedal_type;
  _throttle_pedal_type throttle_pedal;

   typedef double _xbr_type;
  _xbr_type xbr;

   typedef int32_t _gear_type;
  _gear_type gear;

   typedef int32_t _epb_type;
  _epb_type epb;

   typedef int32_t _hang_type;
  _hang_type hang;

   typedef uint8_t _air_beep_type;
  _air_beep_type air_beep;

   typedef uint8_t _left_light_type;
  _left_light_type left_light;

   typedef uint8_t _right_light_type;
  _right_light_type right_light;

   typedef uint8_t _near_light_type;
  _near_light_type near_light;

   typedef uint8_t _far_light_type;
  _far_light_type far_light;

   typedef uint8_t _top_warning_light_type;
  _top_warning_light_type top_warning_light;

   typedef uint8_t _front_fog_light_type;
  _front_fog_light_type front_fog_light;

   typedef uint8_t _front_work_light_type;
  _front_work_light_type front_work_light;

   typedef uint8_t _back_work_light_type;
  _back_work_light_type back_work_light;

   typedef uint8_t _side_light_type;
  _side_light_type side_light;

   typedef uint8_t _position_light_type;
  _position_light_type position_light;

   typedef uint8_t _emergency_light_type;
  _emergency_light_type emergency_light;

   typedef uint8_t _brake_light_type;
  _brake_light_type brake_light;

   typedef uint8_t _reverse_light_type;
  _reverse_light_type reverse_light;





  typedef boost::shared_ptr< ::teledrive_msgs::Tli65Teledrive_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::teledrive_msgs::Tli65Teledrive_<ContainerAllocator> const> ConstPtr;

}; // struct Tli65Teledrive_

typedef ::teledrive_msgs::Tli65Teledrive_<std::allocator<void> > Tli65Teledrive;

typedef boost::shared_ptr< ::teledrive_msgs::Tli65Teledrive > Tli65TeledrivePtr;
typedef boost::shared_ptr< ::teledrive_msgs::Tli65Teledrive const> Tli65TeledriveConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::teledrive_msgs::Tli65Teledrive_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::teledrive_msgs::Tli65Teledrive_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace teledrive_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'teledrive_msgs': ['/home/oligay_61/zone3/src/message/teledrive_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::teledrive_msgs::Tli65Teledrive_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::teledrive_msgs::Tli65Teledrive_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::teledrive_msgs::Tli65Teledrive_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::teledrive_msgs::Tli65Teledrive_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::teledrive_msgs::Tli65Teledrive_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::teledrive_msgs::Tli65Teledrive_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::teledrive_msgs::Tli65Teledrive_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2039e574d82f1c10ec3f95ef9b8ec5ce";
  }

  static const char* value(const ::teledrive_msgs::Tli65Teledrive_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2039e574d82f1c10ULL;
  static const uint64_t static_value2 = 0xec3f95ef9b8ec5ceULL;
};

template<class ContainerAllocator>
struct DataType< ::teledrive_msgs::Tli65Teledrive_<ContainerAllocator> >
{
  static const char* value()
  {
    return "teledrive_msgs/Tli65Teledrive";
  }

  static const char* value(const ::teledrive_msgs::Tli65Teledrive_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::teledrive_msgs::Tli65Teledrive_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string control_type\n\
\n\
float64 steer\n\
float64 throttle_pedal\n\
float64 xbr\n\
int32 gear\n\
int32 epb\n\
int32 hang\n\
bool air_beep\n\
bool left_light\n\
bool right_light\n\
bool near_light\n\
bool far_light\n\
\n\
#TL lights state\n\
bool top_warning_light\n\
bool front_fog_light\n\
bool front_work_light\n\
bool back_work_light\n\
bool side_light\n\
bool position_light\n\
bool emergency_light\n\
bool brake_light\n\
bool reverse_light\n\
";
  }

  static const char* value(const ::teledrive_msgs::Tli65Teledrive_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::teledrive_msgs::Tli65Teledrive_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.control_type);
      stream.next(m.steer);
      stream.next(m.throttle_pedal);
      stream.next(m.xbr);
      stream.next(m.gear);
      stream.next(m.epb);
      stream.next(m.hang);
      stream.next(m.air_beep);
      stream.next(m.left_light);
      stream.next(m.right_light);
      stream.next(m.near_light);
      stream.next(m.far_light);
      stream.next(m.top_warning_light);
      stream.next(m.front_fog_light);
      stream.next(m.front_work_light);
      stream.next(m.back_work_light);
      stream.next(m.side_light);
      stream.next(m.position_light);
      stream.next(m.emergency_light);
      stream.next(m.brake_light);
      stream.next(m.reverse_light);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Tli65Teledrive_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::teledrive_msgs::Tli65Teledrive_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::teledrive_msgs::Tli65Teledrive_<ContainerAllocator>& v)
  {
    s << indent << "control_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.control_type);
    s << indent << "steer: ";
    Printer<double>::stream(s, indent + "  ", v.steer);
    s << indent << "throttle_pedal: ";
    Printer<double>::stream(s, indent + "  ", v.throttle_pedal);
    s << indent << "xbr: ";
    Printer<double>::stream(s, indent + "  ", v.xbr);
    s << indent << "gear: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gear);
    s << indent << "epb: ";
    Printer<int32_t>::stream(s, indent + "  ", v.epb);
    s << indent << "hang: ";
    Printer<int32_t>::stream(s, indent + "  ", v.hang);
    s << indent << "air_beep: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.air_beep);
    s << indent << "left_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left_light);
    s << indent << "right_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right_light);
    s << indent << "near_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.near_light);
    s << indent << "far_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.far_light);
    s << indent << "top_warning_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.top_warning_light);
    s << indent << "front_fog_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.front_fog_light);
    s << indent << "front_work_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.front_work_light);
    s << indent << "back_work_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.back_work_light);
    s << indent << "side_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.side_light);
    s << indent << "position_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.position_light);
    s << indent << "emergency_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.emergency_light);
    s << indent << "brake_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brake_light);
    s << indent << "reverse_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reverse_light);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TELEDRIVE_MSGS_MESSAGE_TLI65TELEDRIVE_H
