# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from planner_msgs/WayPoint.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class WayPoint(genpy.Message):
  _md5sum = "347035a0432cd4d05535eedeba88125a"
  _type = "planner_msgs/WayPoint"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# point has no Header

int32 lock_down_index
int32 aim_pt_index

float64 x
float64 y 
float64 z

float64 roll
float64 pitch
float64 yaw
float64 kalman_yawrate

float64 kalman_vx
float64 acceleration

# teledrive, share gear, xbr
float64 steer
float64 throttle_percentage
float64 xbr
int8 gear

uint8 left_light
uint8 right_light
#uint8 emergency_light
uint8 air_beep

float64 time_to_last_point
float64 current_lat_error
bool flag_lock_down_index_offload"""
  __slots__ = ['lock_down_index','aim_pt_index','x','y','z','roll','pitch','yaw','kalman_yawrate','kalman_vx','acceleration','steer','throttle_percentage','xbr','gear','left_light','right_light','air_beep','time_to_last_point','current_lat_error','flag_lock_down_index_offload']
  _slot_types = ['int32','int32','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','int8','uint8','uint8','uint8','float64','float64','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lock_down_index,aim_pt_index,x,y,z,roll,pitch,yaw,kalman_yawrate,kalman_vx,acceleration,steer,throttle_percentage,xbr,gear,left_light,right_light,air_beep,time_to_last_point,current_lat_error,flag_lock_down_index_offload

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WayPoint, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.lock_down_index is None:
        self.lock_down_index = 0
      if self.aim_pt_index is None:
        self.aim_pt_index = 0
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.z is None:
        self.z = 0.
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.kalman_yawrate is None:
        self.kalman_yawrate = 0.
      if self.kalman_vx is None:
        self.kalman_vx = 0.
      if self.acceleration is None:
        self.acceleration = 0.
      if self.steer is None:
        self.steer = 0.
      if self.throttle_percentage is None:
        self.throttle_percentage = 0.
      if self.xbr is None:
        self.xbr = 0.
      if self.gear is None:
        self.gear = 0
      if self.left_light is None:
        self.left_light = 0
      if self.right_light is None:
        self.right_light = 0
      if self.air_beep is None:
        self.air_beep = 0
      if self.time_to_last_point is None:
        self.time_to_last_point = 0.
      if self.current_lat_error is None:
        self.current_lat_error = 0.
      if self.flag_lock_down_index_offload is None:
        self.flag_lock_down_index_offload = False
    else:
      self.lock_down_index = 0
      self.aim_pt_index = 0
      self.x = 0.
      self.y = 0.
      self.z = 0.
      self.roll = 0.
      self.pitch = 0.
      self.yaw = 0.
      self.kalman_yawrate = 0.
      self.kalman_vx = 0.
      self.acceleration = 0.
      self.steer = 0.
      self.throttle_percentage = 0.
      self.xbr = 0.
      self.gear = 0
      self.left_light = 0
      self.right_light = 0
      self.air_beep = 0
      self.time_to_last_point = 0.
      self.current_lat_error = 0.
      self.flag_lock_down_index_offload = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i12db3B2dB().pack(_x.lock_down_index, _x.aim_pt_index, _x.x, _x.y, _x.z, _x.roll, _x.pitch, _x.yaw, _x.kalman_yawrate, _x.kalman_vx, _x.acceleration, _x.steer, _x.throttle_percentage, _x.xbr, _x.gear, _x.left_light, _x.right_light, _x.air_beep, _x.time_to_last_point, _x.current_lat_error, _x.flag_lock_down_index_offload))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 125
      (_x.lock_down_index, _x.aim_pt_index, _x.x, _x.y, _x.z, _x.roll, _x.pitch, _x.yaw, _x.kalman_yawrate, _x.kalman_vx, _x.acceleration, _x.steer, _x.throttle_percentage, _x.xbr, _x.gear, _x.left_light, _x.right_light, _x.air_beep, _x.time_to_last_point, _x.current_lat_error, _x.flag_lock_down_index_offload,) = _get_struct_2i12db3B2dB().unpack(str[start:end])
      self.flag_lock_down_index_offload = bool(self.flag_lock_down_index_offload)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i12db3B2dB().pack(_x.lock_down_index, _x.aim_pt_index, _x.x, _x.y, _x.z, _x.roll, _x.pitch, _x.yaw, _x.kalman_yawrate, _x.kalman_vx, _x.acceleration, _x.steer, _x.throttle_percentage, _x.xbr, _x.gear, _x.left_light, _x.right_light, _x.air_beep, _x.time_to_last_point, _x.current_lat_error, _x.flag_lock_down_index_offload))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 125
      (_x.lock_down_index, _x.aim_pt_index, _x.x, _x.y, _x.z, _x.roll, _x.pitch, _x.yaw, _x.kalman_yawrate, _x.kalman_vx, _x.acceleration, _x.steer, _x.throttle_percentage, _x.xbr, _x.gear, _x.left_light, _x.right_light, _x.air_beep, _x.time_to_last_point, _x.current_lat_error, _x.flag_lock_down_index_offload,) = _get_struct_2i12db3B2dB().unpack(str[start:end])
      self.flag_lock_down_index_offload = bool(self.flag_lock_down_index_offload)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i12db3B2dB = None
def _get_struct_2i12db3B2dB():
    global _struct_2i12db3B2dB
    if _struct_2i12db3B2dB is None:
        _struct_2i12db3B2dB = struct.Struct("<2i12db3B2dB")
    return _struct_2i12db3B2dB
