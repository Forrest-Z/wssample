// Generated by gencpp from file planner_msgs/WayPoint.msg
// DO NOT EDIT!


#ifndef PLANNER_MSGS_MESSAGE_WAYPOINT_H
#define PLANNER_MSGS_MESSAGE_WAYPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace planner_msgs
{
template <class ContainerAllocator>
struct WayPoint_
{
  typedef WayPoint_<ContainerAllocator> Type;

  WayPoint_()
    : lock_down_index(0)
    , pt_index(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , kalman_yawrate(0.0)
    , kalman_vx(0.0)
    , acceleration(0.0)
    , steer(0.0)
    , throttle_percentage(0.0)
    , xbr(0.0)
    , gear(0)
    , left_light(0)
    , right_light(0)
    , air_beep(0)
    , time_to_last_point(0.0)
    , current_lat_error(0.0)
    , current_lng_error(0.0)
    , flag_lock_down_index_offload(false)  {
    }
  WayPoint_(const ContainerAllocator& _alloc)
    : lock_down_index(0)
    , pt_index(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , kalman_yawrate(0.0)
    , kalman_vx(0.0)
    , acceleration(0.0)
    , steer(0.0)
    , throttle_percentage(0.0)
    , xbr(0.0)
    , gear(0)
    , left_light(0)
    , right_light(0)
    , air_beep(0)
    , time_to_last_point(0.0)
    , current_lat_error(0.0)
    , current_lng_error(0.0)
    , flag_lock_down_index_offload(false)  {
  (void)_alloc;
    }



   typedef int32_t _lock_down_index_type;
  _lock_down_index_type lock_down_index;

   typedef int32_t _pt_index_type;
  _pt_index_type pt_index;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _yaw_type;
  _yaw_type yaw;

   typedef double _kalman_yawrate_type;
  _kalman_yawrate_type kalman_yawrate;

   typedef double _kalman_vx_type;
  _kalman_vx_type kalman_vx;

   typedef double _acceleration_type;
  _acceleration_type acceleration;

   typedef double _steer_type;
  _steer_type steer;

   typedef double _throttle_percentage_type;
  _throttle_percentage_type throttle_percentage;

   typedef double _xbr_type;
  _xbr_type xbr;

   typedef int8_t _gear_type;
  _gear_type gear;

   typedef uint8_t _left_light_type;
  _left_light_type left_light;

   typedef uint8_t _right_light_type;
  _right_light_type right_light;

   typedef uint8_t _air_beep_type;
  _air_beep_type air_beep;

   typedef double _time_to_last_point_type;
  _time_to_last_point_type time_to_last_point;

   typedef double _current_lat_error_type;
  _current_lat_error_type current_lat_error;

   typedef double _current_lng_error_type;
  _current_lng_error_type current_lng_error;

   typedef uint8_t _flag_lock_down_index_offload_type;
  _flag_lock_down_index_offload_type flag_lock_down_index_offload;





  typedef boost::shared_ptr< ::planner_msgs::WayPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planner_msgs::WayPoint_<ContainerAllocator> const> ConstPtr;

}; // struct WayPoint_

typedef ::planner_msgs::WayPoint_<std::allocator<void> > WayPoint;

typedef boost::shared_ptr< ::planner_msgs::WayPoint > WayPointPtr;
typedef boost::shared_ptr< ::planner_msgs::WayPoint const> WayPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planner_msgs::WayPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planner_msgs::WayPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace planner_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'planner_msgs': ['/home/oligay_61/zone3/src/message/planner_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::planner_msgs::WayPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planner_msgs::WayPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planner_msgs::WayPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planner_msgs::WayPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner_msgs::WayPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner_msgs::WayPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planner_msgs::WayPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "183ef1b6b55bba411952818555169ea4";
  }

  static const char* value(const ::planner_msgs::WayPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x183ef1b6b55bba41ULL;
  static const uint64_t static_value2 = 0x1952818555169ea4ULL;
};

template<class ContainerAllocator>
struct DataType< ::planner_msgs::WayPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planner_msgs/WayPoint";
  }

  static const char* value(const ::planner_msgs::WayPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planner_msgs::WayPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# point has no Header\n\
\n\
int32 lock_down_index\n\
int32 pt_index\n\
\n\
float64 x\n\
float64 y \n\
float64 z\n\
\n\
float64 roll\n\
float64 pitch\n\
float64 yaw\n\
float64 kalman_yawrate\n\
\n\
float64 kalman_vx\n\
float64 acceleration\n\
\n\
# teledrive, share gear, xbr\n\
float64 steer\n\
float64 throttle_percentage\n\
float64 xbr\n\
int8 gear\n\
\n\
uint8 left_light\n\
uint8 right_light\n\
#uint8 emergency_light\n\
uint8 air_beep\n\
\n\
float64 time_to_last_point\n\
float64 current_lat_error\n\
float64 current_lng_error\n\
bool flag_lock_down_index_offload\n\
";
  }

  static const char* value(const ::planner_msgs::WayPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planner_msgs::WayPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lock_down_index);
      stream.next(m.pt_index);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.kalman_yawrate);
      stream.next(m.kalman_vx);
      stream.next(m.acceleration);
      stream.next(m.steer);
      stream.next(m.throttle_percentage);
      stream.next(m.xbr);
      stream.next(m.gear);
      stream.next(m.left_light);
      stream.next(m.right_light);
      stream.next(m.air_beep);
      stream.next(m.time_to_last_point);
      stream.next(m.current_lat_error);
      stream.next(m.current_lng_error);
      stream.next(m.flag_lock_down_index_offload);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WayPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planner_msgs::WayPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planner_msgs::WayPoint_<ContainerAllocator>& v)
  {
    s << indent << "lock_down_index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lock_down_index);
    s << indent << "pt_index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pt_index);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "kalman_yawrate: ";
    Printer<double>::stream(s, indent + "  ", v.kalman_yawrate);
    s << indent << "kalman_vx: ";
    Printer<double>::stream(s, indent + "  ", v.kalman_vx);
    s << indent << "acceleration: ";
    Printer<double>::stream(s, indent + "  ", v.acceleration);
    s << indent << "steer: ";
    Printer<double>::stream(s, indent + "  ", v.steer);
    s << indent << "throttle_percentage: ";
    Printer<double>::stream(s, indent + "  ", v.throttle_percentage);
    s << indent << "xbr: ";
    Printer<double>::stream(s, indent + "  ", v.xbr);
    s << indent << "gear: ";
    Printer<int8_t>::stream(s, indent + "  ", v.gear);
    s << indent << "left_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left_light);
    s << indent << "right_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right_light);
    s << indent << "air_beep: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.air_beep);
    s << indent << "time_to_last_point: ";
    Printer<double>::stream(s, indent + "  ", v.time_to_last_point);
    s << indent << "current_lat_error: ";
    Printer<double>::stream(s, indent + "  ", v.current_lat_error);
    s << indent << "current_lng_error: ";
    Printer<double>::stream(s, indent + "  ", v.current_lng_error);
    s << indent << "flag_lock_down_index_offload: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flag_lock_down_index_offload);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNER_MSGS_MESSAGE_WAYPOINT_H
