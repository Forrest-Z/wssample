# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from perception_msgs/Obj.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class Obj(genpy.Message):
  _md5sum = "bad9b664cc24929ab35b00e428cc0976"
  _type = "perception_msgs/Obj"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 id

float32 confidence
int32 age
int32 left_time

geometry_msgs/Point32 left_bottom
geometry_msgs/Point32 right_bottom
geometry_msgs/Point32 left_top
geometry_msgs/Point32 right_top

# v north, east, to ground
float32 v_north
float32 v_east
float32 v_ground
================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z"""
  __slots__ = ['id','confidence','age','left_time','left_bottom','right_bottom','left_top','right_top','v_north','v_east','v_ground']
  _slot_types = ['int32','float32','int32','int32','geometry_msgs/Point32','geometry_msgs/Point32','geometry_msgs/Point32','geometry_msgs/Point32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,confidence,age,left_time,left_bottom,right_bottom,left_top,right_top,v_north,v_east,v_ground

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Obj, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.confidence is None:
        self.confidence = 0.
      if self.age is None:
        self.age = 0
      if self.left_time is None:
        self.left_time = 0
      if self.left_bottom is None:
        self.left_bottom = geometry_msgs.msg.Point32()
      if self.right_bottom is None:
        self.right_bottom = geometry_msgs.msg.Point32()
      if self.left_top is None:
        self.left_top = geometry_msgs.msg.Point32()
      if self.right_top is None:
        self.right_top = geometry_msgs.msg.Point32()
      if self.v_north is None:
        self.v_north = 0.
      if self.v_east is None:
        self.v_east = 0.
      if self.v_ground is None:
        self.v_ground = 0.
    else:
      self.id = 0
      self.confidence = 0.
      self.age = 0
      self.left_time = 0
      self.left_bottom = geometry_msgs.msg.Point32()
      self.right_bottom = geometry_msgs.msg.Point32()
      self.left_top = geometry_msgs.msg.Point32()
      self.right_top = geometry_msgs.msg.Point32()
      self.v_north = 0.
      self.v_east = 0.
      self.v_ground = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_if2i15f().pack(_x.id, _x.confidence, _x.age, _x.left_time, _x.left_bottom.x, _x.left_bottom.y, _x.left_bottom.z, _x.right_bottom.x, _x.right_bottom.y, _x.right_bottom.z, _x.left_top.x, _x.left_top.y, _x.left_top.z, _x.right_top.x, _x.right_top.y, _x.right_top.z, _x.v_north, _x.v_east, _x.v_ground))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.left_bottom is None:
        self.left_bottom = geometry_msgs.msg.Point32()
      if self.right_bottom is None:
        self.right_bottom = geometry_msgs.msg.Point32()
      if self.left_top is None:
        self.left_top = geometry_msgs.msg.Point32()
      if self.right_top is None:
        self.right_top = geometry_msgs.msg.Point32()
      end = 0
      _x = self
      start = end
      end += 76
      (_x.id, _x.confidence, _x.age, _x.left_time, _x.left_bottom.x, _x.left_bottom.y, _x.left_bottom.z, _x.right_bottom.x, _x.right_bottom.y, _x.right_bottom.z, _x.left_top.x, _x.left_top.y, _x.left_top.z, _x.right_top.x, _x.right_top.y, _x.right_top.z, _x.v_north, _x.v_east, _x.v_ground,) = _get_struct_if2i15f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_if2i15f().pack(_x.id, _x.confidence, _x.age, _x.left_time, _x.left_bottom.x, _x.left_bottom.y, _x.left_bottom.z, _x.right_bottom.x, _x.right_bottom.y, _x.right_bottom.z, _x.left_top.x, _x.left_top.y, _x.left_top.z, _x.right_top.x, _x.right_top.y, _x.right_top.z, _x.v_north, _x.v_east, _x.v_ground))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.left_bottom is None:
        self.left_bottom = geometry_msgs.msg.Point32()
      if self.right_bottom is None:
        self.right_bottom = geometry_msgs.msg.Point32()
      if self.left_top is None:
        self.left_top = geometry_msgs.msg.Point32()
      if self.right_top is None:
        self.right_top = geometry_msgs.msg.Point32()
      end = 0
      _x = self
      start = end
      end += 76
      (_x.id, _x.confidence, _x.age, _x.left_time, _x.left_bottom.x, _x.left_bottom.y, _x.left_bottom.z, _x.right_bottom.x, _x.right_bottom.y, _x.right_bottom.z, _x.left_top.x, _x.left_top.y, _x.left_top.z, _x.right_top.x, _x.right_top.y, _x.right_top.z, _x.v_north, _x.v_east, _x.v_ground,) = _get_struct_if2i15f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_if2i15f = None
def _get_struct_if2i15f():
    global _struct_if2i15f
    if _struct_if2i15f is None:
        _struct_if2i15f = struct.Struct("<if2i15f")
    return _struct_if2i15f
