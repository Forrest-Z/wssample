// Generated by gencpp from file perception_msgs/Obj.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MSGS_MESSAGE_OBJ_H
#define PERCEPTION_MSGS_MESSAGE_OBJ_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point32.h>
#include <geometry_msgs/Point32.h>
#include <geometry_msgs/Point32.h>
#include <geometry_msgs/Point32.h>

namespace perception_msgs
{
template <class ContainerAllocator>
struct Obj_
{
  typedef Obj_<ContainerAllocator> Type;

  Obj_()
    : id(0)
    , confidence(0.0)
    , age(0)
    , left_time(0)
    , left_bottom()
    , right_bottom()
    , left_top()
    , right_top()
    , v_north(0.0)
    , v_east(0.0)
    , v_ground(0.0)  {
    }
  Obj_(const ContainerAllocator& _alloc)
    : id(0)
    , confidence(0.0)
    , age(0)
    , left_time(0)
    , left_bottom(_alloc)
    , right_bottom(_alloc)
    , left_top(_alloc)
    , right_top(_alloc)
    , v_north(0.0)
    , v_east(0.0)
    , v_ground(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef float _confidence_type;
  _confidence_type confidence;

   typedef int32_t _age_type;
  _age_type age;

   typedef int32_t _left_time_type;
  _left_time_type left_time;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _left_bottom_type;
  _left_bottom_type left_bottom;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _right_bottom_type;
  _right_bottom_type right_bottom;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _left_top_type;
  _left_top_type left_top;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _right_top_type;
  _right_top_type right_top;

   typedef float _v_north_type;
  _v_north_type v_north;

   typedef float _v_east_type;
  _v_east_type v_east;

   typedef float _v_ground_type;
  _v_ground_type v_ground;





  typedef boost::shared_ptr< ::perception_msgs::Obj_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_msgs::Obj_<ContainerAllocator> const> ConstPtr;

}; // struct Obj_

typedef ::perception_msgs::Obj_<std::allocator<void> > Obj;

typedef boost::shared_ptr< ::perception_msgs::Obj > ObjPtr;
typedef boost::shared_ptr< ::perception_msgs::Obj const> ObjConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_msgs::Obj_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_msgs::Obj_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace perception_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'perception_msgs': ['/home/oligay_61/zone3/src/message/perception_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::Obj_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::Obj_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::Obj_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::Obj_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::Obj_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::Obj_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_msgs::Obj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bad9b664cc24929ab35b00e428cc0976";
  }

  static const char* value(const ::perception_msgs::Obj_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbad9b664cc24929aULL;
  static const uint64_t static_value2 = 0xb35b00e428cc0976ULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_msgs::Obj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_msgs/Obj";
  }

  static const char* value(const ::perception_msgs::Obj_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_msgs::Obj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n\
\n\
float32 confidence\n\
int32 age\n\
int32 left_time\n\
\n\
geometry_msgs/Point32 left_bottom\n\
geometry_msgs/Point32 right_bottom\n\
geometry_msgs/Point32 left_top\n\
geometry_msgs/Point32 right_top\n\
\n\
# v north, east, to ground\n\
float32 v_north\n\
float32 v_east\n\
float32 v_ground\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const ::perception_msgs::Obj_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_msgs::Obj_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.confidence);
      stream.next(m.age);
      stream.next(m.left_time);
      stream.next(m.left_bottom);
      stream.next(m.right_bottom);
      stream.next(m.left_top);
      stream.next(m.right_top);
      stream.next(m.v_north);
      stream.next(m.v_east);
      stream.next(m.v_ground);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Obj_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_msgs::Obj_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_msgs::Obj_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
    s << indent << "age: ";
    Printer<int32_t>::stream(s, indent + "  ", v.age);
    s << indent << "left_time: ";
    Printer<int32_t>::stream(s, indent + "  ", v.left_time);
    s << indent << "left_bottom: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.left_bottom);
    s << indent << "right_bottom: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.right_bottom);
    s << indent << "left_top: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.left_top);
    s << indent << "right_top: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.right_top);
    s << indent << "v_north: ";
    Printer<float>::stream(s, indent + "  ", v.v_north);
    s << indent << "v_east: ";
    Printer<float>::stream(s, indent + "  ", v.v_east);
    s << indent << "v_ground: ";
    Printer<float>::stream(s, indent + "  ", v.v_ground);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MSGS_MESSAGE_OBJ_H
