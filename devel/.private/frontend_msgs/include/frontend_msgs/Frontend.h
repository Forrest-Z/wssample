// Generated by gencpp from file frontend_msgs/Frontend.msg
// DO NOT EDIT!


#ifndef FRONTEND_MSGS_MESSAGE_FRONTEND_H
#define FRONTEND_MSGS_MESSAGE_FRONTEND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace frontend_msgs
{
template <class ContainerAllocator>
struct Frontend_
{
  typedef Frontend_<ContainerAllocator> Type;

  Frontend_()
    : TL_left_light(false)
    , TL_right_light(false)
    , TL_near_light(false)
    , TL_far_light(false)
    , TL_top_warning_light(false)
    , TL_front_fog_light(false)
    , TL_front_work_light(false)
    , TL_back_work_light(false)
    , TL_side_light(false)
    , TL_position_light(false)
    , TL_back_left_light(false)
    , TL_back_right_light(false)
    , emergency_light(false)
    , TL_back_position_light(false)
    , TL_brake_light(false)
    , TL_reverse_light(false)  {
    }
  Frontend_(const ContainerAllocator& _alloc)
    : TL_left_light(false)
    , TL_right_light(false)
    , TL_near_light(false)
    , TL_far_light(false)
    , TL_top_warning_light(false)
    , TL_front_fog_light(false)
    , TL_front_work_light(false)
    , TL_back_work_light(false)
    , TL_side_light(false)
    , TL_position_light(false)
    , TL_back_left_light(false)
    , TL_back_right_light(false)
    , emergency_light(false)
    , TL_back_position_light(false)
    , TL_brake_light(false)
    , TL_reverse_light(false)  {
  (void)_alloc;
    }



   typedef uint8_t _TL_left_light_type;
  _TL_left_light_type TL_left_light;

   typedef uint8_t _TL_right_light_type;
  _TL_right_light_type TL_right_light;

   typedef uint8_t _TL_near_light_type;
  _TL_near_light_type TL_near_light;

   typedef uint8_t _TL_far_light_type;
  _TL_far_light_type TL_far_light;

   typedef uint8_t _TL_top_warning_light_type;
  _TL_top_warning_light_type TL_top_warning_light;

   typedef uint8_t _TL_front_fog_light_type;
  _TL_front_fog_light_type TL_front_fog_light;

   typedef uint8_t _TL_front_work_light_type;
  _TL_front_work_light_type TL_front_work_light;

   typedef uint8_t _TL_back_work_light_type;
  _TL_back_work_light_type TL_back_work_light;

   typedef uint8_t _TL_side_light_type;
  _TL_side_light_type TL_side_light;

   typedef uint8_t _TL_position_light_type;
  _TL_position_light_type TL_position_light;

   typedef uint8_t _TL_back_left_light_type;
  _TL_back_left_light_type TL_back_left_light;

   typedef uint8_t _TL_back_right_light_type;
  _TL_back_right_light_type TL_back_right_light;

   typedef uint8_t _emergency_light_type;
  _emergency_light_type emergency_light;

   typedef uint8_t _TL_back_position_light_type;
  _TL_back_position_light_type TL_back_position_light;

   typedef uint8_t _TL_brake_light_type;
  _TL_brake_light_type TL_brake_light;

   typedef uint8_t _TL_reverse_light_type;
  _TL_reverse_light_type TL_reverse_light;





  typedef boost::shared_ptr< ::frontend_msgs::Frontend_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::frontend_msgs::Frontend_<ContainerAllocator> const> ConstPtr;

}; // struct Frontend_

typedef ::frontend_msgs::Frontend_<std::allocator<void> > Frontend;

typedef boost::shared_ptr< ::frontend_msgs::Frontend > FrontendPtr;
typedef boost::shared_ptr< ::frontend_msgs::Frontend const> FrontendConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::frontend_msgs::Frontend_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::frontend_msgs::Frontend_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace frontend_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'frontend_msgs': ['/home/oligay_61/zone3/src/message/frontend_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::frontend_msgs::Frontend_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::frontend_msgs::Frontend_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::frontend_msgs::Frontend_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::frontend_msgs::Frontend_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::frontend_msgs::Frontend_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::frontend_msgs::Frontend_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::frontend_msgs::Frontend_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6d69890661b416e2254fb5f08a7e73e1";
  }

  static const char* value(const ::frontend_msgs::Frontend_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6d69890661b416e2ULL;
  static const uint64_t static_value2 = 0x254fb5f08a7e73e1ULL;
};

template<class ContainerAllocator>
struct DataType< ::frontend_msgs::Frontend_<ContainerAllocator> >
{
  static const char* value()
  {
    return "frontend_msgs/Frontend";
  }

  static const char* value(const ::frontend_msgs::Frontend_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::frontend_msgs::Frontend_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool TL_left_light\n\
bool TL_right_light\n\
bool TL_near_light\n\
bool TL_far_light\n\
\n\
bool TL_top_warning_light\n\
bool TL_front_fog_light\n\
bool TL_front_work_light\n\
bool TL_back_work_light\n\
bool TL_side_light\n\
bool TL_position_light\n\
bool TL_back_left_light\n\
bool TL_back_right_light\n\
bool emergency_light\n\
bool TL_back_position_light\n\
bool TL_brake_light\n\
bool TL_reverse_light\n\
";
  }

  static const char* value(const ::frontend_msgs::Frontend_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::frontend_msgs::Frontend_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.TL_left_light);
      stream.next(m.TL_right_light);
      stream.next(m.TL_near_light);
      stream.next(m.TL_far_light);
      stream.next(m.TL_top_warning_light);
      stream.next(m.TL_front_fog_light);
      stream.next(m.TL_front_work_light);
      stream.next(m.TL_back_work_light);
      stream.next(m.TL_side_light);
      stream.next(m.TL_position_light);
      stream.next(m.TL_back_left_light);
      stream.next(m.TL_back_right_light);
      stream.next(m.emergency_light);
      stream.next(m.TL_back_position_light);
      stream.next(m.TL_brake_light);
      stream.next(m.TL_reverse_light);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Frontend_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::frontend_msgs::Frontend_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::frontend_msgs::Frontend_<ContainerAllocator>& v)
  {
    s << indent << "TL_left_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.TL_left_light);
    s << indent << "TL_right_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.TL_right_light);
    s << indent << "TL_near_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.TL_near_light);
    s << indent << "TL_far_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.TL_far_light);
    s << indent << "TL_top_warning_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.TL_top_warning_light);
    s << indent << "TL_front_fog_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.TL_front_fog_light);
    s << indent << "TL_front_work_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.TL_front_work_light);
    s << indent << "TL_back_work_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.TL_back_work_light);
    s << indent << "TL_side_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.TL_side_light);
    s << indent << "TL_position_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.TL_position_light);
    s << indent << "TL_back_left_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.TL_back_left_light);
    s << indent << "TL_back_right_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.TL_back_right_light);
    s << indent << "emergency_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.emergency_light);
    s << indent << "TL_back_position_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.TL_back_position_light);
    s << indent << "TL_brake_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.TL_brake_light);
    s << indent << "TL_reverse_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.TL_reverse_light);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FRONTEND_MSGS_MESSAGE_FRONTEND_H
