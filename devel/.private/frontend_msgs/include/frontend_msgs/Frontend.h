// Generated by gencpp from file frontend_msgs/Frontend.msg
// DO NOT EDIT!


#ifndef FRONTEND_MSGS_MESSAGE_FRONTEND_H
#define FRONTEND_MSGS_MESSAGE_FRONTEND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace frontend_msgs
{
template <class ContainerAllocator>
struct Frontend_
{
  typedef Frontend_<ContainerAllocator> Type;

  Frontend_()
    : left_light(0)
    , right_light(0)
    , near_light(0)
    , far_light(0)
    , top_warning_light(0)
    , air_beep(0)
    , front_fog_light(0)
    , front_work_light(0)
    , side_light(0)
    , position_light(0)
    , back_left_light(0)
    , back_right_light(0)
    , back_position_light(0)
    , brake_light(0)
    , reverse_light(0)
    , back_work_light(0)
    , emergency_light(0)  {
    }
  Frontend_(const ContainerAllocator& _alloc)
    : left_light(0)
    , right_light(0)
    , near_light(0)
    , far_light(0)
    , top_warning_light(0)
    , air_beep(0)
    , front_fog_light(0)
    , front_work_light(0)
    , side_light(0)
    , position_light(0)
    , back_left_light(0)
    , back_right_light(0)
    , back_position_light(0)
    , brake_light(0)
    , reverse_light(0)
    , back_work_light(0)
    , emergency_light(0)  {
  (void)_alloc;
    }



   typedef int32_t _left_light_type;
  _left_light_type left_light;

   typedef int32_t _right_light_type;
  _right_light_type right_light;

   typedef int32_t _near_light_type;
  _near_light_type near_light;

   typedef int32_t _far_light_type;
  _far_light_type far_light;

   typedef int32_t _top_warning_light_type;
  _top_warning_light_type top_warning_light;

   typedef int32_t _air_beep_type;
  _air_beep_type air_beep;

   typedef int32_t _front_fog_light_type;
  _front_fog_light_type front_fog_light;

   typedef int32_t _front_work_light_type;
  _front_work_light_type front_work_light;

   typedef int32_t _side_light_type;
  _side_light_type side_light;

   typedef int32_t _position_light_type;
  _position_light_type position_light;

   typedef int32_t _back_left_light_type;
  _back_left_light_type back_left_light;

   typedef int32_t _back_right_light_type;
  _back_right_light_type back_right_light;

   typedef int32_t _back_position_light_type;
  _back_position_light_type back_position_light;

   typedef int32_t _brake_light_type;
  _brake_light_type brake_light;

   typedef int32_t _reverse_light_type;
  _reverse_light_type reverse_light;

   typedef int32_t _back_work_light_type;
  _back_work_light_type back_work_light;

   typedef uint32_t _emergency_light_type;
  _emergency_light_type emergency_light;





  typedef boost::shared_ptr< ::frontend_msgs::Frontend_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::frontend_msgs::Frontend_<ContainerAllocator> const> ConstPtr;

}; // struct Frontend_

typedef ::frontend_msgs::Frontend_<std::allocator<void> > Frontend;

typedef boost::shared_ptr< ::frontend_msgs::Frontend > FrontendPtr;
typedef boost::shared_ptr< ::frontend_msgs::Frontend const> FrontendConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::frontend_msgs::Frontend_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::frontend_msgs::Frontend_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace frontend_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'frontend_msgs': ['/home/oligay_61/zone3/src/message/frontend_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::frontend_msgs::Frontend_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::frontend_msgs::Frontend_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::frontend_msgs::Frontend_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::frontend_msgs::Frontend_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::frontend_msgs::Frontend_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::frontend_msgs::Frontend_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::frontend_msgs::Frontend_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4b5bd2883c6474dfc70615b662bea589";
  }

  static const char* value(const ::frontend_msgs::Frontend_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4b5bd2883c6474dfULL;
  static const uint64_t static_value2 = 0xc70615b662bea589ULL;
};

template<class ContainerAllocator>
struct DataType< ::frontend_msgs::Frontend_<ContainerAllocator> >
{
  static const char* value()
  {
    return "frontend_msgs/Frontend";
  }

  static const char* value(const ::frontend_msgs::Frontend_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::frontend_msgs::Frontend_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#TL lights feedback\n\
int32 left_light\n\
int32 right_light\n\
int32 near_light\n\
int32 far_light\n\
\n\
int32 top_warning_light\n\
int32 air_beep\n\
int32 front_fog_light\n\
int32 front_work_light\n\
int32 side_light\n\
int32 position_light\n\
int32 back_left_light\n\
int32 back_right_light\n\
int32 back_position_light\n\
int32 brake_light\n\
int32 reverse_light\n\
int32 back_work_light\n\
\n\
# frontend lights control\n\
uint32 emergency_light\n\
";
  }

  static const char* value(const ::frontend_msgs::Frontend_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::frontend_msgs::Frontend_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left_light);
      stream.next(m.right_light);
      stream.next(m.near_light);
      stream.next(m.far_light);
      stream.next(m.top_warning_light);
      stream.next(m.air_beep);
      stream.next(m.front_fog_light);
      stream.next(m.front_work_light);
      stream.next(m.side_light);
      stream.next(m.position_light);
      stream.next(m.back_left_light);
      stream.next(m.back_right_light);
      stream.next(m.back_position_light);
      stream.next(m.brake_light);
      stream.next(m.reverse_light);
      stream.next(m.back_work_light);
      stream.next(m.emergency_light);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Frontend_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::frontend_msgs::Frontend_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::frontend_msgs::Frontend_<ContainerAllocator>& v)
  {
    s << indent << "left_light: ";
    Printer<int32_t>::stream(s, indent + "  ", v.left_light);
    s << indent << "right_light: ";
    Printer<int32_t>::stream(s, indent + "  ", v.right_light);
    s << indent << "near_light: ";
    Printer<int32_t>::stream(s, indent + "  ", v.near_light);
    s << indent << "far_light: ";
    Printer<int32_t>::stream(s, indent + "  ", v.far_light);
    s << indent << "top_warning_light: ";
    Printer<int32_t>::stream(s, indent + "  ", v.top_warning_light);
    s << indent << "air_beep: ";
    Printer<int32_t>::stream(s, indent + "  ", v.air_beep);
    s << indent << "front_fog_light: ";
    Printer<int32_t>::stream(s, indent + "  ", v.front_fog_light);
    s << indent << "front_work_light: ";
    Printer<int32_t>::stream(s, indent + "  ", v.front_work_light);
    s << indent << "side_light: ";
    Printer<int32_t>::stream(s, indent + "  ", v.side_light);
    s << indent << "position_light: ";
    Printer<int32_t>::stream(s, indent + "  ", v.position_light);
    s << indent << "back_left_light: ";
    Printer<int32_t>::stream(s, indent + "  ", v.back_left_light);
    s << indent << "back_right_light: ";
    Printer<int32_t>::stream(s, indent + "  ", v.back_right_light);
    s << indent << "back_position_light: ";
    Printer<int32_t>::stream(s, indent + "  ", v.back_position_light);
    s << indent << "brake_light: ";
    Printer<int32_t>::stream(s, indent + "  ", v.brake_light);
    s << indent << "reverse_light: ";
    Printer<int32_t>::stream(s, indent + "  ", v.reverse_light);
    s << indent << "back_work_light: ";
    Printer<int32_t>::stream(s, indent + "  ", v.back_work_light);
    s << indent << "emergency_light: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.emergency_light);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FRONTEND_MSGS_MESSAGE_FRONTEND_H
