# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from frontend_msgs/Frontend_TLdisplay.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Frontend_TLdisplay(genpy.Message):
  _md5sum = "e622ba7a39d3ca14b4c60375b5cf0f77"
  _type = "frontend_msgs/Frontend_TLdisplay"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#TL lights feedback
int32 left_light
int32 right_light
int32 near_light
int32 far_light

int32 top_warning_light
int32 air_beep
int32 front_fog_light
int32 front_work_light
int32 side_light
int32 position_light
int32 back_left_light
int32 back_right_light
int32 back_position_light
int32 brake_light
int32 reverse_light
int32 back_work_light

"""
  __slots__ = ['left_light','right_light','near_light','far_light','top_warning_light','air_beep','front_fog_light','front_work_light','side_light','position_light','back_left_light','back_right_light','back_position_light','brake_light','reverse_light','back_work_light']
  _slot_types = ['int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       left_light,right_light,near_light,far_light,top_warning_light,air_beep,front_fog_light,front_work_light,side_light,position_light,back_left_light,back_right_light,back_position_light,brake_light,reverse_light,back_work_light

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Frontend_TLdisplay, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.left_light is None:
        self.left_light = 0
      if self.right_light is None:
        self.right_light = 0
      if self.near_light is None:
        self.near_light = 0
      if self.far_light is None:
        self.far_light = 0
      if self.top_warning_light is None:
        self.top_warning_light = 0
      if self.air_beep is None:
        self.air_beep = 0
      if self.front_fog_light is None:
        self.front_fog_light = 0
      if self.front_work_light is None:
        self.front_work_light = 0
      if self.side_light is None:
        self.side_light = 0
      if self.position_light is None:
        self.position_light = 0
      if self.back_left_light is None:
        self.back_left_light = 0
      if self.back_right_light is None:
        self.back_right_light = 0
      if self.back_position_light is None:
        self.back_position_light = 0
      if self.brake_light is None:
        self.brake_light = 0
      if self.reverse_light is None:
        self.reverse_light = 0
      if self.back_work_light is None:
        self.back_work_light = 0
    else:
      self.left_light = 0
      self.right_light = 0
      self.near_light = 0
      self.far_light = 0
      self.top_warning_light = 0
      self.air_beep = 0
      self.front_fog_light = 0
      self.front_work_light = 0
      self.side_light = 0
      self.position_light = 0
      self.back_left_light = 0
      self.back_right_light = 0
      self.back_position_light = 0
      self.brake_light = 0
      self.reverse_light = 0
      self.back_work_light = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_16i().pack(_x.left_light, _x.right_light, _x.near_light, _x.far_light, _x.top_warning_light, _x.air_beep, _x.front_fog_light, _x.front_work_light, _x.side_light, _x.position_light, _x.back_left_light, _x.back_right_light, _x.back_position_light, _x.brake_light, _x.reverse_light, _x.back_work_light))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.left_light, _x.right_light, _x.near_light, _x.far_light, _x.top_warning_light, _x.air_beep, _x.front_fog_light, _x.front_work_light, _x.side_light, _x.position_light, _x.back_left_light, _x.back_right_light, _x.back_position_light, _x.brake_light, _x.reverse_light, _x.back_work_light,) = _get_struct_16i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_16i().pack(_x.left_light, _x.right_light, _x.near_light, _x.far_light, _x.top_warning_light, _x.air_beep, _x.front_fog_light, _x.front_work_light, _x.side_light, _x.position_light, _x.back_left_light, _x.back_right_light, _x.back_position_light, _x.brake_light, _x.reverse_light, _x.back_work_light))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.left_light, _x.right_light, _x.near_light, _x.far_light, _x.top_warning_light, _x.air_beep, _x.front_fog_light, _x.front_work_light, _x.side_light, _x.position_light, _x.back_left_light, _x.back_right_light, _x.back_position_light, _x.brake_light, _x.reverse_light, _x.back_work_light,) = _get_struct_16i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16i = None
def _get_struct_16i():
    global _struct_16i
    if _struct_16i is None:
        _struct_16i = struct.Struct("<16i")
    return _struct_16i
