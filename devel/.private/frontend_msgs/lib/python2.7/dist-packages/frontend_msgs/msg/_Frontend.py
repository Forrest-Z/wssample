# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from frontend_msgs/Frontend.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Frontend(genpy.Message):
  _md5sum = "6d69890661b416e2254fb5f08a7e73e1"
  _type = "frontend_msgs/Frontend"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool TL_left_light
bool TL_right_light
bool TL_near_light
bool TL_far_light

bool TL_top_warning_light
bool TL_front_fog_light
bool TL_front_work_light
bool TL_back_work_light
bool TL_side_light
bool TL_position_light
bool TL_back_left_light
bool TL_back_right_light
bool emergency_light
bool TL_back_position_light
bool TL_brake_light
bool TL_reverse_light"""
  __slots__ = ['TL_left_light','TL_right_light','TL_near_light','TL_far_light','TL_top_warning_light','TL_front_fog_light','TL_front_work_light','TL_back_work_light','TL_side_light','TL_position_light','TL_back_left_light','TL_back_right_light','emergency_light','TL_back_position_light','TL_brake_light','TL_reverse_light']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       TL_left_light,TL_right_light,TL_near_light,TL_far_light,TL_top_warning_light,TL_front_fog_light,TL_front_work_light,TL_back_work_light,TL_side_light,TL_position_light,TL_back_left_light,TL_back_right_light,emergency_light,TL_back_position_light,TL_brake_light,TL_reverse_light

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Frontend, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.TL_left_light is None:
        self.TL_left_light = False
      if self.TL_right_light is None:
        self.TL_right_light = False
      if self.TL_near_light is None:
        self.TL_near_light = False
      if self.TL_far_light is None:
        self.TL_far_light = False
      if self.TL_top_warning_light is None:
        self.TL_top_warning_light = False
      if self.TL_front_fog_light is None:
        self.TL_front_fog_light = False
      if self.TL_front_work_light is None:
        self.TL_front_work_light = False
      if self.TL_back_work_light is None:
        self.TL_back_work_light = False
      if self.TL_side_light is None:
        self.TL_side_light = False
      if self.TL_position_light is None:
        self.TL_position_light = False
      if self.TL_back_left_light is None:
        self.TL_back_left_light = False
      if self.TL_back_right_light is None:
        self.TL_back_right_light = False
      if self.emergency_light is None:
        self.emergency_light = False
      if self.TL_back_position_light is None:
        self.TL_back_position_light = False
      if self.TL_brake_light is None:
        self.TL_brake_light = False
      if self.TL_reverse_light is None:
        self.TL_reverse_light = False
    else:
      self.TL_left_light = False
      self.TL_right_light = False
      self.TL_near_light = False
      self.TL_far_light = False
      self.TL_top_warning_light = False
      self.TL_front_fog_light = False
      self.TL_front_work_light = False
      self.TL_back_work_light = False
      self.TL_side_light = False
      self.TL_position_light = False
      self.TL_back_left_light = False
      self.TL_back_right_light = False
      self.emergency_light = False
      self.TL_back_position_light = False
      self.TL_brake_light = False
      self.TL_reverse_light = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_16B().pack(_x.TL_left_light, _x.TL_right_light, _x.TL_near_light, _x.TL_far_light, _x.TL_top_warning_light, _x.TL_front_fog_light, _x.TL_front_work_light, _x.TL_back_work_light, _x.TL_side_light, _x.TL_position_light, _x.TL_back_left_light, _x.TL_back_right_light, _x.emergency_light, _x.TL_back_position_light, _x.TL_brake_light, _x.TL_reverse_light))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.TL_left_light, _x.TL_right_light, _x.TL_near_light, _x.TL_far_light, _x.TL_top_warning_light, _x.TL_front_fog_light, _x.TL_front_work_light, _x.TL_back_work_light, _x.TL_side_light, _x.TL_position_light, _x.TL_back_left_light, _x.TL_back_right_light, _x.emergency_light, _x.TL_back_position_light, _x.TL_brake_light, _x.TL_reverse_light,) = _get_struct_16B().unpack(str[start:end])
      self.TL_left_light = bool(self.TL_left_light)
      self.TL_right_light = bool(self.TL_right_light)
      self.TL_near_light = bool(self.TL_near_light)
      self.TL_far_light = bool(self.TL_far_light)
      self.TL_top_warning_light = bool(self.TL_top_warning_light)
      self.TL_front_fog_light = bool(self.TL_front_fog_light)
      self.TL_front_work_light = bool(self.TL_front_work_light)
      self.TL_back_work_light = bool(self.TL_back_work_light)
      self.TL_side_light = bool(self.TL_side_light)
      self.TL_position_light = bool(self.TL_position_light)
      self.TL_back_left_light = bool(self.TL_back_left_light)
      self.TL_back_right_light = bool(self.TL_back_right_light)
      self.emergency_light = bool(self.emergency_light)
      self.TL_back_position_light = bool(self.TL_back_position_light)
      self.TL_brake_light = bool(self.TL_brake_light)
      self.TL_reverse_light = bool(self.TL_reverse_light)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_16B().pack(_x.TL_left_light, _x.TL_right_light, _x.TL_near_light, _x.TL_far_light, _x.TL_top_warning_light, _x.TL_front_fog_light, _x.TL_front_work_light, _x.TL_back_work_light, _x.TL_side_light, _x.TL_position_light, _x.TL_back_left_light, _x.TL_back_right_light, _x.emergency_light, _x.TL_back_position_light, _x.TL_brake_light, _x.TL_reverse_light))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.TL_left_light, _x.TL_right_light, _x.TL_near_light, _x.TL_far_light, _x.TL_top_warning_light, _x.TL_front_fog_light, _x.TL_front_work_light, _x.TL_back_work_light, _x.TL_side_light, _x.TL_position_light, _x.TL_back_left_light, _x.TL_back_right_light, _x.emergency_light, _x.TL_back_position_light, _x.TL_brake_light, _x.TL_reverse_light,) = _get_struct_16B().unpack(str[start:end])
      self.TL_left_light = bool(self.TL_left_light)
      self.TL_right_light = bool(self.TL_right_light)
      self.TL_near_light = bool(self.TL_near_light)
      self.TL_far_light = bool(self.TL_far_light)
      self.TL_top_warning_light = bool(self.TL_top_warning_light)
      self.TL_front_fog_light = bool(self.TL_front_fog_light)
      self.TL_front_work_light = bool(self.TL_front_work_light)
      self.TL_back_work_light = bool(self.TL_back_work_light)
      self.TL_side_light = bool(self.TL_side_light)
      self.TL_position_light = bool(self.TL_position_light)
      self.TL_back_left_light = bool(self.TL_back_left_light)
      self.TL_back_right_light = bool(self.TL_back_right_light)
      self.emergency_light = bool(self.emergency_light)
      self.TL_back_position_light = bool(self.TL_back_position_light)
      self.TL_brake_light = bool(self.TL_brake_light)
      self.TL_reverse_light = bool(self.TL_reverse_light)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16B = None
def _get_struct_16B():
    global _struct_16B
    if _struct_16B is None:
        _struct_16B = struct.Struct("<16B")
    return _struct_16B
