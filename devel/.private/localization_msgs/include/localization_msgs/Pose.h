// Generated by gencpp from file localization_msgs/Pose.msg
// DO NOT EDIT!


#ifndef LOCALIZATION_MSGS_MESSAGE_POSE_H
#define LOCALIZATION_MSGS_MESSAGE_POSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Quaternion.h>

namespace localization_msgs
{
template <class ContainerAllocator>
struct Pose_
{
  typedef Pose_<ContainerAllocator> Type;

  Pose_()
    : header()
    , rtk_state(0)
    , lat(0.0)
    , lng(0.0)
    , alt(0.0)
    , latlng_std(0.0)
    , x_enu(0.0)
    , y_enu(0.0)
    , z_enu(0.0)
    , xy_std_enu(0.0)
    , vx_ego(0.0)
    , vy_ego(0.0)
    , vz_ego(0.0)
    , speed(0.0)
    , ax_ego(0.0)
    , ay_ego(0.0)
    , az_ego(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , yaw_rate(0.0)
    , orientation()  {
    }
  Pose_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , rtk_state(0)
    , lat(0.0)
    , lng(0.0)
    , alt(0.0)
    , latlng_std(0.0)
    , x_enu(0.0)
    , y_enu(0.0)
    , z_enu(0.0)
    , xy_std_enu(0.0)
    , vx_ego(0.0)
    , vy_ego(0.0)
    , vz_ego(0.0)
    , speed(0.0)
    , ax_ego(0.0)
    , ay_ego(0.0)
    , az_ego(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , yaw_rate(0.0)
    , orientation(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int8_t _rtk_state_type;
  _rtk_state_type rtk_state;

   typedef double _lat_type;
  _lat_type lat;

   typedef double _lng_type;
  _lng_type lng;

   typedef double _alt_type;
  _alt_type alt;

   typedef double _latlng_std_type;
  _latlng_std_type latlng_std;

   typedef double _x_enu_type;
  _x_enu_type x_enu;

   typedef double _y_enu_type;
  _y_enu_type y_enu;

   typedef double _z_enu_type;
  _z_enu_type z_enu;

   typedef double _xy_std_enu_type;
  _xy_std_enu_type xy_std_enu;

   typedef double _vx_ego_type;
  _vx_ego_type vx_ego;

   typedef double _vy_ego_type;
  _vy_ego_type vy_ego;

   typedef double _vz_ego_type;
  _vz_ego_type vz_ego;

   typedef double _speed_type;
  _speed_type speed;

   typedef double _ax_ego_type;
  _ax_ego_type ax_ego;

   typedef double _ay_ego_type;
  _ay_ego_type ay_ego;

   typedef double _az_ego_type;
  _az_ego_type az_ego;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _yaw_type;
  _yaw_type yaw;

   typedef double _yaw_rate_type;
  _yaw_rate_type yaw_rate;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _orientation_type;
  _orientation_type orientation;





  typedef boost::shared_ptr< ::localization_msgs::Pose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::localization_msgs::Pose_<ContainerAllocator> const> ConstPtr;

}; // struct Pose_

typedef ::localization_msgs::Pose_<std::allocator<void> > Pose;

typedef boost::shared_ptr< ::localization_msgs::Pose > PosePtr;
typedef boost::shared_ptr< ::localization_msgs::Pose const> PoseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::localization_msgs::Pose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::localization_msgs::Pose_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace localization_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'localization_msgs': ['/home/oligay_61/zone3/src/message/localization_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::localization_msgs::Pose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::localization_msgs::Pose_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::localization_msgs::Pose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::localization_msgs::Pose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::localization_msgs::Pose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::localization_msgs::Pose_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::localization_msgs::Pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3e81e5554b4c298442f33329f73e80ce";
  }

  static const char* value(const ::localization_msgs::Pose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3e81e5554b4c2984ULL;
  static const uint64_t static_value2 = 0x42f33329f73e80ceULL;
};

template<class ContainerAllocator>
struct DataType< ::localization_msgs::Pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "localization_msgs/Pose";
  }

  static const char* value(const ::localization_msgs::Pose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::localization_msgs::Pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
int8 rtk_state \n\
# -1 : no gnss\n\
# 0 : 2D or 3D gnss fix\n\
# 1 : SBAS or Starfire gnss fix\n\
# 2 : Diff or rtk fix\n\
\n\
# wgs84\n\
float64 lat\n\
float64 lng\n\
float64 alt\n\
float64 latlng_std\n\
\n\
# enu coord\n\
float64 x_enu\n\
float64 y_enu\n\
float64 z_enu\n\
float64 xy_std_enu\n\
\n\
# v north, east, to ground\n\
float64 vx_ego\n\
float64 vy_ego\n\
float64 vz_ego\n\
float64 speed\n\
float64 ax_ego\n\
float64 ay_ego\n\
float64 az_ego\n\
\n\
# ego coord, in rad\n\
float64 roll\n\
float64 pitch\n\
float64 yaw\n\
float64 yaw_rate\n\
geometry_msgs/Quaternion orientation\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::localization_msgs::Pose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::localization_msgs::Pose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.rtk_state);
      stream.next(m.lat);
      stream.next(m.lng);
      stream.next(m.alt);
      stream.next(m.latlng_std);
      stream.next(m.x_enu);
      stream.next(m.y_enu);
      stream.next(m.z_enu);
      stream.next(m.xy_std_enu);
      stream.next(m.vx_ego);
      stream.next(m.vy_ego);
      stream.next(m.vz_ego);
      stream.next(m.speed);
      stream.next(m.ax_ego);
      stream.next(m.ay_ego);
      stream.next(m.az_ego);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.yaw_rate);
      stream.next(m.orientation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Pose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::localization_msgs::Pose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::localization_msgs::Pose_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "rtk_state: ";
    Printer<int8_t>::stream(s, indent + "  ", v.rtk_state);
    s << indent << "lat: ";
    Printer<double>::stream(s, indent + "  ", v.lat);
    s << indent << "lng: ";
    Printer<double>::stream(s, indent + "  ", v.lng);
    s << indent << "alt: ";
    Printer<double>::stream(s, indent + "  ", v.alt);
    s << indent << "latlng_std: ";
    Printer<double>::stream(s, indent + "  ", v.latlng_std);
    s << indent << "x_enu: ";
    Printer<double>::stream(s, indent + "  ", v.x_enu);
    s << indent << "y_enu: ";
    Printer<double>::stream(s, indent + "  ", v.y_enu);
    s << indent << "z_enu: ";
    Printer<double>::stream(s, indent + "  ", v.z_enu);
    s << indent << "xy_std_enu: ";
    Printer<double>::stream(s, indent + "  ", v.xy_std_enu);
    s << indent << "vx_ego: ";
    Printer<double>::stream(s, indent + "  ", v.vx_ego);
    s << indent << "vy_ego: ";
    Printer<double>::stream(s, indent + "  ", v.vy_ego);
    s << indent << "vz_ego: ";
    Printer<double>::stream(s, indent + "  ", v.vz_ego);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "ax_ego: ";
    Printer<double>::stream(s, indent + "  ", v.ax_ego);
    s << indent << "ay_ego: ";
    Printer<double>::stream(s, indent + "  ", v.ay_ego);
    s << indent << "az_ego: ";
    Printer<double>::stream(s, indent + "  ", v.az_ego);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "yaw_rate: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_rate);
    s << indent << "orientation: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LOCALIZATION_MSGS_MESSAGE_POSE_H
