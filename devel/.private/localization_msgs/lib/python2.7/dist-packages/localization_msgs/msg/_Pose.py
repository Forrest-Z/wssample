# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from localization_msgs/Pose.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class Pose(genpy.Message):
  _md5sum = "3e81e5554b4c298442f33329f73e80ce"
  _type = "localization_msgs/Pose"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

int8 rtk_state 
# -1 : no gnss
# 0 : 2D or 3D gnss fix
# 1 : SBAS or Starfire gnss fix
# 2 : Diff or rtk fix

# wgs84
float64 lat
float64 lng
float64 alt
float64 latlng_std

# enu coord
float64 x_enu
float64 y_enu
float64 z_enu
float64 xy_std_enu

# v north, east, to ground
float64 vx_ego
float64 vy_ego
float64 vz_ego
float64 speed
float64 ax_ego
float64 ay_ego
float64 az_ego

# ego coord, in rad
float64 roll
float64 pitch
float64 yaw
float64 yaw_rate
geometry_msgs/Quaternion orientation
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['header','rtk_state','lat','lng','alt','latlng_std','x_enu','y_enu','z_enu','xy_std_enu','vx_ego','vy_ego','vz_ego','speed','ax_ego','ay_ego','az_ego','roll','pitch','yaw','yaw_rate','orientation']
  _slot_types = ['std_msgs/Header','int8','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','geometry_msgs/Quaternion']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,rtk_state,lat,lng,alt,latlng_std,x_enu,y_enu,z_enu,xy_std_enu,vx_ego,vy_ego,vz_ego,speed,ax_ego,ay_ego,az_ego,roll,pitch,yaw,yaw_rate,orientation

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Pose, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.rtk_state is None:
        self.rtk_state = 0
      if self.lat is None:
        self.lat = 0.
      if self.lng is None:
        self.lng = 0.
      if self.alt is None:
        self.alt = 0.
      if self.latlng_std is None:
        self.latlng_std = 0.
      if self.x_enu is None:
        self.x_enu = 0.
      if self.y_enu is None:
        self.y_enu = 0.
      if self.z_enu is None:
        self.z_enu = 0.
      if self.xy_std_enu is None:
        self.xy_std_enu = 0.
      if self.vx_ego is None:
        self.vx_ego = 0.
      if self.vy_ego is None:
        self.vy_ego = 0.
      if self.vz_ego is None:
        self.vz_ego = 0.
      if self.speed is None:
        self.speed = 0.
      if self.ax_ego is None:
        self.ax_ego = 0.
      if self.ay_ego is None:
        self.ay_ego = 0.
      if self.az_ego is None:
        self.az_ego = 0.
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.yaw_rate is None:
        self.yaw_rate = 0.
      if self.orientation is None:
        self.orientation = geometry_msgs.msg.Quaternion()
    else:
      self.header = std_msgs.msg.Header()
      self.rtk_state = 0
      self.lat = 0.
      self.lng = 0.
      self.alt = 0.
      self.latlng_std = 0.
      self.x_enu = 0.
      self.y_enu = 0.
      self.z_enu = 0.
      self.xy_std_enu = 0.
      self.vx_ego = 0.
      self.vy_ego = 0.
      self.vz_ego = 0.
      self.speed = 0.
      self.ax_ego = 0.
      self.ay_ego = 0.
      self.az_ego = 0.
      self.roll = 0.
      self.pitch = 0.
      self.yaw = 0.
      self.yaw_rate = 0.
      self.orientation = geometry_msgs.msg.Quaternion()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_b23d().pack(_x.rtk_state, _x.lat, _x.lng, _x.alt, _x.latlng_std, _x.x_enu, _x.y_enu, _x.z_enu, _x.xy_std_enu, _x.vx_ego, _x.vy_ego, _x.vz_ego, _x.speed, _x.ax_ego, _x.ay_ego, _x.az_ego, _x.roll, _x.pitch, _x.yaw, _x.yaw_rate, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.orientation is None:
        self.orientation = geometry_msgs.msg.Quaternion()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 185
      (_x.rtk_state, _x.lat, _x.lng, _x.alt, _x.latlng_std, _x.x_enu, _x.y_enu, _x.z_enu, _x.xy_std_enu, _x.vx_ego, _x.vy_ego, _x.vz_ego, _x.speed, _x.ax_ego, _x.ay_ego, _x.az_ego, _x.roll, _x.pitch, _x.yaw, _x.yaw_rate, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w,) = _get_struct_b23d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_b23d().pack(_x.rtk_state, _x.lat, _x.lng, _x.alt, _x.latlng_std, _x.x_enu, _x.y_enu, _x.z_enu, _x.xy_std_enu, _x.vx_ego, _x.vy_ego, _x.vz_ego, _x.speed, _x.ax_ego, _x.ay_ego, _x.az_ego, _x.roll, _x.pitch, _x.yaw, _x.yaw_rate, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.orientation is None:
        self.orientation = geometry_msgs.msg.Quaternion()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 185
      (_x.rtk_state, _x.lat, _x.lng, _x.alt, _x.latlng_std, _x.x_enu, _x.y_enu, _x.z_enu, _x.xy_std_enu, _x.vx_ego, _x.vy_ego, _x.vz_ego, _x.speed, _x.ax_ego, _x.ay_ego, _x.az_ego, _x.roll, _x.pitch, _x.yaw, _x.yaw_rate, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w,) = _get_struct_b23d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_b23d = None
def _get_struct_b23d():
    global _struct_b23d
    if _struct_b23d is None:
        _struct_b23d = struct.Struct("<b23d")
    return _struct_b23d
